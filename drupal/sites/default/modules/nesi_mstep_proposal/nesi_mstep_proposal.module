<?php
/**
 * @file
 * Ctools hooks for a multi step form
 */

// @todo Do not include from global scope. Use Drupal registries and module_load_include() from function scope:
// @see http://drupal.org/node/350780
// @see http://api.drupal.org/api/search/7/module_load_include
// @see "file path" http://api.drupal.org/api/search/7/hook_menu
include_once 'forms/proposal_form_intro.inc';
include_once 'forms/proposal_form_development.inc';
include_once 'forms/proposal_form_research.inc';
include_once 'forms/proposal_form_postgrad.inc';
include_once 'includes/nesi_mstep_proposal_email.inc';
include_once 'includes/nesi_mstep_proposal_pdf.inc';

define('NESI_MSTEP_PROPOSAL_PDF_DIRECTORY', 'public://applications');

/**
 * Implements hook_menu().
 */
function nesi_mstep_proposal_menu() {
  $items = array();
  
  $items['apply/%ctools_js/create-proposal'] = array(
    'title' => t('Apply for Access to HPC Facilities'),
    'page callback' => 'nesi_mstep_proposal_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['apply/proposal-complete'] = array(
    'title' => t('Proposal Complete'),
    'page callback' => 'nesi_mstep_proposal_complete',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['apply/access-policy'] = array(
    'title' => t('Access Policy'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nesi_mstep_proposal_accept_terms_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // For testing.
  // $items['apply/email-testing'] = array(
  //   'title' => t('Email testing'),
  //   'page callback' => 'nesi_mstep_proposal_email_test_page',
  //   'page arguments' => array(1),
  //   'access callback' => TRUE,
  //   'type' => MENU_CALLBACK,
  // );

  // For development.
  // $items['apply/pdf-theme'] = array(
  //   'title' => t('Email testing'),
  //   'page callback' => 'nesi_mstep_proposal_email_theme_page',
  //   'page arguments' => array(1),
  //   'access callback' => TRUE,
  //   'type' => MENU_CALLBACK,
  // );

  // For testing.
  // $items['apply/pdf-generate'] = array(
  //   'title' => t('PDF testing'),
  //   'page callback' => 'nesi_mstep_proposal_pdf_generate_page',
  //   'page arguments' => array(1),
  //   'access callback' => TRUE,
  //   'type' => MENU_CALLBACK,
  // );

  return $items;
}

/**
 * Implements hook_theme().
 */
function nesi_mstep_proposal_theme($existing, $type, $theme, $path) {

  $variables = array();

  return array(
    'nesi_mstep_proposal_step' => array(
      'variables' => $variables,
      'template' => 'nesi-mstep-proposal-step',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    ),
    'nesi_mstep_proposal_wrapper' => array(
      'variables' => array('content' => NULL),
      'template' => 'nesi-mstep-proposal-wrapper',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    ),
    'nesi_mstep_proposal_pdf' => array(
      'variables' => array('data' => NULL), 
      'template' => 'nesi-mstep-proposal-pdf',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    )
  ); 
}

/**
 * Page callback for apply/%ctools_js/create-proposal
 */
function nesi_mstep_proposal_page($js = NULL, $step = NULL) {
  // Open the login overlay on page load for anonymous users.
  if (!user_is_logged_in()) {
    drupal_add_js(array('nesiLoginModal' => array('open' => TRUE)), 'setting');
  }
  ctools_include('wizard');
  ctools_include('object-cache');

  if (empty($step)) {
    // We reset the form when $step is NULL because that means they have
    // for whatever reason started over.
    nesi_mstep_proposal_cache_clear('nesi_mstep');
    $step = 'step1';
  }

  // Get form from cache
  $ctools_object = nesi_mstep_proposal_cache_get('nesi_mstep');

  if (empty($ctools_object->form_info)) {
    $ctools_object->form_info = array(
      'id' => 'nesi_mstep', //form id
      'path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step", //pass the step we're on to the form, step1, step2, ..etc
      'show trail' => FALSE, //show the breadcrumb / path trail for the forms
      'show back' => TRUE, //show the back button
      'show cancel' => FALSE, //show the cancel button
      'show return' => FALSE, //show the update and return button
      'next callback' =>  'nesi_mstep_proposal_wizard_next', //a callback function to run when the next button is pressed
      'finish callback' => 'nesi_mstep_proposal_wizard_finish', //callback when finish button is pressed
      'return callback' => 'nesi_mstep_proposal_wizard_finish', //callback when finish button is pressed
      'cancel callback' => 'nesi_mstep_proposal_wizard_cancel', //callback when cancel button is pressed
      'cancel path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step",
      'return path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step",
      'finish text' => 'Submit Proposal',
      'order' => _nesi_mstep_proposal_steps(),
      'forms' => _nesi_mstep_proposal_forms(),
    );

    $form_state['ctools_object'] = $ctools_object;

    // Send this all off to our form. This is like drupal_get_form only wizardy.
    return ctools_wizard_multistep_form($ctools_object->form_info, $step, $form_state);
  }
}

/**
 * Returns array of steps (in order of display) for use within the multistep wizard.
 */
function _nesi_mstep_proposal_steps() {
  return array( 
    'step1' => t('Get Started'),
    'step2' => t('Proposal Intro'),
    'step3' => t('Accept Terms'),
  );
}

function _nesi_mstep_proposal_steps_research_proposal() {
  return array( 
    'step1' => t('Get Started'),
    'step2' => t('Proposal Intro'),
    'step3' => t('Proposal Team'),
    'step4' => t('Completion'),
    'step5' => t('Accept Terms'),
  );
}

/**
 * Returns array of forms to be utilised by multistep wizard.
 *
 * These are the default steps for the wizard - and used the development 
 * proposal. Other proposals overwrite this array in the step_2 function.
 */
function _nesi_mstep_proposal_forms() {
  // Each step relates to a form callback
  return array(     
    'step1' => array( 
      'form id' => 'nesi_mstep_proposal_step_1'
    ),
    'step2' => array(
      'form id' => 'nesi_mstep_proposal_step_2'
    ),
   'step3' => array(
      'form id' => 'nesi_mstep_proposal_step_3'
    ),

  );
}

function _nesi_mstep_proposal_forms_research_proposal() {
  // These steps are used for Research Proposal and Postgraduate workflow

  // Each step relates to a form callback
  return array(     
    'step1' => array( 
      'form id' => 'nesi_mstep_proposal_step_1'
    ),
    'step2' => array(
      'form id' => 'nesi_mstep_proposal_step_2'
    ),
    'step3' => array(
      'form id' => 'nesi_mstep_proposal_step_3'
    ), 
    'step4' => array(
      'form id' => 'nesi_mstep_proposal_step_4'
    ), 
    'step5' => array(
      'form id' => 'nesi_mstep_proposal_step_5'
    ), 

  );
}

/**
 * Returns array of proposal types available for completion.
 *
 * @todo Get the title from the content type configuration.
 */
function nesi_mstep_proposal_class_types() {
  return array(
    'proposal_development_class' => 'Proposal Development',
    'research_proposal_class'    => 'Research',
    'proposal_postgrad_class'    => 'Postgraduate',
  );
}

/**
 * Returns available cluster platform options for use within proposal forms.
 */
function nesi_mstep_proposal_platform_options() {
  return array(
    'power6'   => 'P575/POWER6',
    'power7'   => 'P755/POWER7',
    'intel'    => 'Intel cluster',
    'bluegene' => 'BlueGeneP',
    'unknown'  => 'Don\'t know',
  );
}

function nesi_mstep_proposal_complete($proposal_type = NULL) {
  
  $proposal_label = '';
  
  if (!empty($proposal_type)) {
    if ($proposal_type == 'pdc') {
      $proposal_label = 'Proposal Development ';
    }
    if ($proposal_type == 'prc') {
      $proposal_label = 'Research Proposal ';
    }
    if ($proposal_type == 'pgc') {
      $proposal_label = 'Postgraduate Proposal ';
    }
  }

  return array(
    '#markup' => '<div class="nesi-confirmation-left"></div>
                  <div class="nesi-confirmation-center">
                    <div class="nesi-confirmation-center-top"></div>
                    <div class="nesi-confirmation-center-inner">
                      <h1>Thank you</h1>
                      <h2>Your '.$proposal_label.'submission has been placed and will now go into the review stage.</h2>
                      <p>A copy of the Access Policy will be in your email inbox.<br />You will receive a confirmation email shortly.</p>
                    </div>
                    <div class="nesi-confirmation-center-bottom"></div>
                  </div>
                  <div class="nesi-confirmation-right"></div>
                  <div class="confirmation-block confirmation-block-1">
                    <h2>What happens next</h2>
                    <p>One of the NeSI staff will be in contact with you shortly to guide you through the process. Alternatively you can contact us here.</p>
                    <p><a href="#contact">Contact us</a>.</p>
                  </div>
                  <div class="confirmation-block confirmation-block-2">
                    <h2>Take a look at who uses NeSI</h2>
                    <p>NeSI is used by researchers nationwide. Take a look at who uses NeSI and some of the current computing allocations.</p>
                    <p><a href="/projects">Read more</a>.</p>
                  </div>',
  );
}

function nesi_mstep_proposal_step_1($form, &$form_state) {
  $form['intro'] = nesi_mstep_proposal_intro_form();
  $form['buttons']['next']['#value'] = 'Start';
  return $form;
}

function nesi_mstep_proposal_step_2($form, &$form_state) {

  $proposal_selection = $form_state['ctools_object']->data['proposal-type'];

  if ($proposal_selection == 'proposal_development_class') {
    drupal_set_title('Development Class: Technical Project Proposal'); 
    $form['pdc'] = nesi_mstep_proposal_development_form($form_state);
  }

  if ($proposal_selection == 'research_proposal_class') {
    drupal_set_title('Research Class: Technical Project Proposal'); 
    $form['buttons']['next']['#value'] = 'Next: Technical Details';  
    $form['prc'] = nesi_mstep_proposal_research_form($form_state);
  }

  if ($proposal_selection == 'proposal_postgrad_class') {
    drupal_set_title('Postgraduate Class: Technical Project Proposal'); 
    $form['buttons']['next']['#value'] = 'Next: Technical Details';  
    $form['prc'] = nesi_mstep_proposal_postgrad_form($form_state);
  }

  return $form;
}

function nesi_mstep_proposal_step_3($form, &$form_state) {

  $proposal_selection = $form_state['ctools_object']->data['proposal-type'];

  if ($proposal_selection == 'proposal_development_class') {
    drupal_set_title('Access Policy'); 
    $form['access-policy'] = array(
      '#markup' => nesi_mstep_proposal_access_policy(),
    );

    // Rename buttons for access policy
    $form['buttons']['return']['#value'] = 'I Accept';
    unset($form['buttons']['previous']);
    $form['buttons']['previous'] = $form['buttons']['return'];
    $form['buttons']['previous']['#value'] = 'I Do Not Accept'; 

    // Put buttons in correct order
    ksort($form['buttons']);
  }
  if ($proposal_selection == 'research_proposal_class') {
    drupal_set_title('Research Class: Technical Project Proposal'); 
    $form['buttons']['next']['#value'] = 'Next: Support Information';  
    $form['prc'] = nesi_mstep_proposal_research_form_part_2($form_state);
  }
  if ($proposal_selection == 'proposal_postgrad_class') {
    drupal_set_title('Postgraduate Class: Technical Project Proposal'); 
    $form['buttons']['next']['#value'] = 'Next: Support Information';  
    $form['prc'] = nesi_mstep_proposal_postgrad_form_part_2($form_state);
  }
  return $form;
}

/**
 * Final proposal step to display access policy with acceptance options.
 */
function nesi_mstep_proposal_accept_terms_form(&$form_state) {

  $form['access-policy'] = array(
    '#markup' => nesi_mstep_proposal_access_policy(),
  );

  //$form['actions'] = array('#type' => 'actions');
  //$form['actions']['submit'] = array(
    //'#type' => 'submit',
    //'#value' => t('I accept'),
    //'#submit' => array('nesi_mstep_proposal_accept_terms_submit'),
    //'#attributes' => array(
      //'class' => array('btn-primary'),
    //),
  //);
  //$form['actions']['reject'] = array(
    //'#type' => 'submit',
    //'#value' => t('I do not accept'),
    //'#submit' => array('nesi_mstep_proposal_accept_terms_submit'),
  //);
 
  return $form;
}



function nesi_mstep_proposal_access_policy() {
  $policy = render(node_view(node_load(variable_get('nesi_access_policy_nid', 145)), 'full'));
  return '<div class="scrollable-frame">' . $policy . '</div>';
}

function nesi_mstep_proposal_step_4($form, &$form_state) {
 
  $proposal_selection = $form_state['ctools_object']->data['proposal-type'];

  if ($proposal_selection == 'research_proposal_class') {
    drupal_set_title('Research Class: Technical Project Proposal'); 
    $form['prc'] = nesi_mstep_proposal_research_form_part_3($form_state);
  }

  if ($proposal_selection == 'proposal_postgrad_class') {
    drupal_set_title('Postgraduate Class: Technical Project Proposal'); 
    $form['pgc'] = nesi_mstep_proposal_postgrad_form_part_3($form_state);
  }
  return $form;
}

function nesi_mstep_proposal_step_5($form, &$form_state) {

  drupal_set_title('Access Policy'); 
  $form['access-policy'] = array(
    '#markup' => nesi_mstep_proposal_access_policy(),
  );

  // Rename buttons for access policy
  $form['buttons']['return']['#value'] = 'I Accept';
  unset($form['buttons']['previous']);
  $form['buttons']['previous'] = $form['buttons']['return'];
  $form['buttons']['previous']['#value'] = 'I Do Not Accept'; 

  // Put buttons in correct order
  ksort($form['buttons']);

  return $form;
}


function nesi_mstep_proposal_step_1_validate($form, &$form_state) {
  // Check for standard errors
  if(form_get_errors()) {
    return;
  }

  // Check that a proposal type has been selected
  $proposal_selection = $form_state['values']['proposal-type'];

  $options = array('proposal_development_class','research_proposal_class','proposal_postgrad_class');
   
  if (!in_array($proposal_selection, $options)) {
    form_set_error('proposal-type', 'Please select a proposal type.');
  }

  // Check validation on email address
  $submitter_email = trim($form_state['values']['sub_email']);
  if (!valid_email_address($submitter_email)) {
    form_set_error('sub_email', 'Please supply a valid email address to begin proposal submission.');
  }
}

function nesi_mstep_proposal_step_2_validate($form, &$form_state) {

  if ($form_state['ctools_object']->data['proposal-type'] == 'proposal_development_class') {
    // User needs to choose a platform
    $platform = $form_state['values']['pdc-platform'];
    if (empty($platform)) {
      //form_set_error('pdc-platform', 'Please select an HPC platform.');
    }
  }
}

function nesi_mstep_proposal_step_4_validate($form, &$form_state) {

  // Check for standard errors
  if(form_get_errors()) {
    return;
  }
  
  // User needs to indicate if they need support
  $support = $form_state['values']['prc-expert-support'];
  if (empty($support)) {
    #form_set_error('prc-expert-support', 'Please indicate if you need expert support from NeSI');
  }
}

function nesi_mstep_proposal_step_1_submit($form, &$form_state) {

  $form_state['ctools_object']->data['proposal-type'] = $form_state['values']['proposal-type'];
  $form_state['ctools_object']->data['sub-email'] = $form_state['values']['sub_email'];

  // Collect extra steps for research proposal
  if ($form_state['ctools_object']->data['proposal-type'] == 'research_proposal_class') {
    $form_state['ctools_object']->form_info['order'] = _nesi_mstep_proposal_steps_research_proposal();
    $form_state['ctools_object']->form_info['forms'] = _nesi_mstep_proposal_forms_research_proposal(); 
  }
  // Collect extra steps for postgrad proposal
  if ($form_state['ctools_object']->data['proposal-type'] == 'proposal_postgrad_class') {
    $form_state['ctools_object']->form_info['order'] = _nesi_mstep_proposal_steps_research_proposal();
    $form_state['ctools_object']->form_info['forms'] = _nesi_mstep_proposal_forms_research_proposal(); 
  }
}

function nesi_mstep_proposal_step_2_submit($form, &$form_state) {
  $form_state['ctools_object']->data['form_data'] = array_merge_recursive( (array) $form_state['ctools_object']->data['form_data'] , (array) $form_state['values']);
}

function nesi_mstep_proposal_step_3_submit($form, &$form_state) {

  // This is the last step for the development proposal type and is the access 
  // policy page. There is no for values on this page so lets not wipe out all 
  // the data that we've saved
  if ($form_state['ctools_object']->data['proposal-type'] != 'proposal_development_class') {
    $form_state['ctools_object']->data['form_data'] = array_merge_recursive( (array) $form_state['ctools_object']->data['form_data'] , (array) $form_state['values']);
  }
}

function nesi_mstep_proposal_step_4_submit($form, &$form_state) {
  $form_state['ctools_object']->data['form_data'] = array_merge_recursive( (array) $form_state['ctools_object']->data['form_data'] , (array) $form_state['values']);
}

function nesi_mstep_proposal_step_5_submit($form, &$form_state) {
  #$form_state['ctools_object']->data['form_data'] = array_merge_recursive( (array) $form_state['ctools_object']->data['form_data'] , (array) $form_state['values']);
}

/**
 * Next callback
 */
function nesi_mstep_proposal_wizard_next(&$form_state) {
  nesi_mstep_proposal_cache_set('nesi_mstep', $form_state['ctools_object']);
}

function nesi_mstep_proposal_wizard_finish(&$form_state) {
  $form_state['complete'] = TRUE;

  // Save Proposal
  $node_id = _nesi_mstep_proposal_save($form_state);
 
  // Send emails 
  $to = $form_state['ctools_object']->data['sub-email'];
  nesi_mstep_proposal_email($to,$node_id);
  $to = variable_get('submission_nesi_admin_email', 'sam+nesiadmin@webscope.co.nz');
  nesi_mstep_admin_email($to , $node_id, $form_state['ctools_object']);

  // Clear the form data cache from the session

  // Send user to access policy acceptance page 
  nesi_mstep_finish_redirect($node_id);
}

function nesi_mstep_finish_redirect($node_id) {
 
  $proposal = node_load($node_id);

  if ($proposal) {
    if ($form_state['triggering_element']['#value'] == t('I accept')) {
      // Update access policy status for this project: 1 = ACCEPTED
      $proposal->field_access_policy_status[LANGUAGE_NONE][0]['value'] = 1;
      node_save($proposal);
    }

    // Append proposal type flag to url for completion page
    if ($proposal->type == 'proposal_development_class') {
      $flag = 'pdc';
    }  
    if ($proposal->type == 'research_proposal_class') {
      $flag = 'prc';
    }  
    if ($proposal->type == 'proposal_postgrad_class') {
      $flag = 'pgc';
    }  
  }

  // Assign undefined if proposal failed to load
  if (empty($flag)) { $flag = 'undefined'; }

  drupal_goto('apply/proposal-complete/'.$flag.'/'.$node_id);
}

/**
 * Creates a base proposal node
 * Serialises proposal form values into bp_container field
 */
function _nesi_mstep_proposal_save(&$form_state) {
  global $user;
  $proposal_type = $form_state['ctools_object']->data['proposal-type'];

  $p_title = 'Proposal Title';
  $p_title = $form_state['ctools_object']->data['form_data']['node-title'];

  // Generic save function for all field types apart from checkboxes and radios
  // Gets the fields to save directly from the content type
  $save_to_node = function(&$node, $content_type) use (&$form_state)
  {
    $fields = field_info_instances("node",$content_type);

    foreach($fields as $field_data) {
      $field_name = $field_data['field_name'];
      // Form api fields use '-' as a convention, field names use '_'
      $field_data_name = str_replace('_' , '-' , $field_name);
      $node->{$field_name}[$node->language][0]['value'] = $form_state['ctools_object']->data['form_data'][$field_data_name];
    }
  };
 
  // Save proposal data
  if ($proposal_type == 'proposal_development_class') {
    
    $p_node = new stdClass(); // Create a new node object
    $p_node->type = 'proposal_development_class';
    node_object_prepare($p_node); // Set some default values
    $p_node->title = $p_title;
    $p_node->language = LANGUAGE_NONE;
    $p_node->uid = $user->uid;
    
    $save_to_node($p_node, $p_node->type);
 
    // Check boxes
    $p_node->field_pdc_proposed_hpc_platform[$p_node->language] = array();
    $platforms = array_filter($form_state['ctools_object']->data['form_data']['field-pdc-platform']);
    foreach ($platforms as $selected) {
      $p_node->field_pdc_proposed_hpc_platform[$p_node->language][] = array('value' => $selected);
    }
 
    // Check boxes
    $p_node->field_pdc_expert_support[$p_node->language] = array();
    $support_items = array_filter($form_state['ctools_object']->data['form_data']['field-pdc-expert-support']);
    foreach ($support_items as $selected) {
      $p_node->field_pdc_expert_support[$p_node->language][] = array('value' => $selected);
    }
  }

  if ($proposal_type == 'research_proposal_class') {

    $p_node = new stdClass(); // Create a new node object
    $p_node->type = 'proposal_research_class';
    node_object_prepare($p_node); // Set some default values
    $p_node->title = $p_title;
    $p_node->language = LANGUAGE_NONE;
    $p_node->uid = $user->uid;

    $save_to_node($p_node, $p_node->type);
  } 
  if ($proposal_type == 'proposal_postgrad_class') {

    $p_node = new stdClass(); // Create a new node object
    $p_node->type = 'proposal_postgrad_class';
    node_object_prepare($p_node); // Set some default values
    $p_node->title = $p_title;
    $p_node->language = LANGUAGE_NONE;
    $p_node->uid = $user->uid;

    $save_to_node($p_node, $p_node->type);
  }

  node_save($p_node); 
  $node_id = $p_node->nid;

  return $node_id;
}

function nesi_mstep_proposal_wizard_cancel(&$form_state) {
  nesi_mstep_proposal_cache_clear('nesi_mstep');
  $form_state['cancel'] = TRUE;
  drupal_goto('apply/nojs/create-proposal');
}

/**
 * Cache helpers
 */
function nesi_mstep_proposal_cache_set($name, $data) {
  ctools_include('object-cache');
  $cache = ctools_object_cache_set('nesi_mstep_proposal', $name, $data);
}

/**
 * Get the current object from the cache, or default.
 */
function nesi_mstep_proposal_cache_get($name) {
  ctools_include('object-cache');

  $cache = ctools_object_cache_get('nesi_mstep_proposal', $name);
  if (!$cache) {
    $cache = new stdClass();
    $cache->locked = ctools_object_cache_test('nesi_mstep_proposal', $name);
  }
  return $cache;
}

/**
 * Clear the wizard cache.
 */
function nesi_mstep_proposal_cache_clear($name) {
  ctools_include('object-cache');
  ctools_object_cache_clear('nesi_mstep_proposal', $name);
}

function nesi_mstep_proposal_form_alter(&$form, &$form_state, $form_id) {
  // These fields are not currently used in Research Proposal
  // Remove from edit view.
  if ($form_id == 'proposal_research_class_node_form' ) {
    $form['field_prc_proposed_hpc_platform']['#access'] = FALSE;
    $form['field_prc_cpu_core_hours']['#access'] = FALSE;
    $form['field_prc_estimated_run_length']['#access'] = FALSE;
  }
}


