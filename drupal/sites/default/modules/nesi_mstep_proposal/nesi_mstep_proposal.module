<?php
/**
 * @file
 * Ctools hooks for a multi step form
 */

// @todo Do not include from global scope. Use Drupal registries and module_load_include() from function scope:
// @see http://drupal.org/node/350780
// @see http://api.drupal.org/api/search/7/module_load_include
// @see "file path" http://api.drupal.org/api/search/7/hook_menu
include_once 'forms/proposal_form_intro.inc';
include_once 'forms/proposal_form_development.inc';
include_once 'forms/proposal_form_research.inc';
include_once 'includes/nesi_mstep_proposal_email.inc';
include_once 'includes/nesi_mstep_proposal_pdf.inc';

/**
 * Implementation of hook init
 */
function nesi_mstep_proposal_init() {
  // Don't cache proposal page for anonymous users!

  // if the path leads to the wizard
  if (drupal_match_path($_GET['q'], 'apply/*')) {
    // set cache to false
    $GLOBALS['conf']['cache'] = FALSE;   
  }
}

/**
 * Implementation of hook_menu()
 */
function nesi_mstep_proposal_menu() {
  $items = array();
  
  $items['apply/%ctools_js/create-proposal'] = array(
    'title' => t('Apply for Access to HPC Facilities'),
    'page callback' => 'nesi_mstep_proposal_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['apply/proposal-complete'] = array(
    'title' => t('Proposal Complete'),
    'page callback' => 'nesi_mstep_proposal_complete',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // For testing
  $items['apply/email-testing'] = array(
    'title' => t('Email testing'),
    'page callback' => 'nesi_mstep_proposal_email_test_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  // For development
  // TODO set access for developers only
  $items['apply/pdf-theme'] = array(
    'title' => t('Email testing'),
    'page callback' => 'nesi_mstep_proposal_email_theme_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // For testing
  $items['apply/pdf-generate'] = array(
    'title' => t('PDF testing'),
    'page callback' => 'nesi_mstep_proposal_pdf_generate_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * hook_theme
 */
function nesi_mstep_proposal_theme($existing, $type, $theme, $path) {

  $variables = array();

  return array(
    'nesi_mstep_proposal_step' => array(
      'variables' => $variables,
      'template' => 'nesi-mstep-proposal-step',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    ),
    'nesi_mstep_proposal_wrapper' => array(
      'variables' => array('content' => NULL),
      'template' => 'nesi-mstep-proposal-wrapper',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    ),
    'nesi_mstep_proposal_pdf' => array(
      'variables' => array('data' => NULL), 
      'template' => 'nesi-mstep-proposal-pdf',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    )
  ); 
}

/**
 * Page callback for apply/%ctools_js/create-proposal
 */
function nesi_mstep_proposal_page($js = NULL, $step = NULL) {

  if (user_is_logged_in()) {
 
    ctools_include('wizard');
    ctools_include('object-cache');

    if (empty($step)) {
      // We reset the form when $step is NULL because that means they have
      // for whatever reason started over.
      nesi_mstep_proposal_cache_clear('nesi_mstep');
      $step = 'step1';
    }

    // Get form from cache
    $ctools_object = nesi_mstep_proposal_cache_get('nesi_mstep');

    if (empty($ctools_object->form_info)) {
   
      $ctools_object->form_info = array(
        'id' => 'nesi_mstep', //form id
        'path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step", //pass the step we're on to the form, step1, step2, ..etc
        'show trail' => FALSE, //show the breadcrumb / path trail for the forms
        'show back' => TRUE, //show the back button
        'show cancel' => FALSE, //show the cancel button
        'show return' => FALSE, //show the update and return button
        'next callback' =>  'nesi_mstep_proposal_wizard_next', //a callback function to run when the next button is pressed
        'finish callback' => 'nesi_mstep_proposal_wizard_finish', //callback when finish button is pressed
        'return callback' => 'nesi_mstep_proposal_wizard_finish', //callback when finish button is pressed
        'cancel callback' => 'nesi_mstep_proposal_wizard_cancel', //callback when cancel button is pressed
        'cancel path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step",
        'return path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step",
        'finish text' => 'Submit Proposal',
        'order' => _nesi_mstep_proposal_steps(),
        'forms' => _nesi_mstep_proposal_forms(), 
      );
    }
    
    $form_state['ctools_object'] = $ctools_object;

    // Send this all off to our form. This is like drupal_get_form only wizardy.
    $ctools_form = ctools_wizard_multistep_form($ctools_object->form_info, $step, $form_state);
    $output = drupal_render($ctools_form);
    
    return $output;
  }
  else {
    drupal_goto('user/login');
  }
}

/**
 * Returns array of steps (in order of display) for use within the multistep wizard.
 */
function _nesi_mstep_proposal_steps() {
  return array( 
    'step1' => t('Get Started'),
    'step2' => t('Proposal Intro'),
  );
}

function _nesi_mstep_proposal_steps_research_proposal() {
  return array( 
    'step1' => t('Get Started'),
    'step2' => t('Proposal Intro'),
    'step3' => t('Proposal Team'),
    'step4' => t('Completion'),
  );
}

/**
 * Returns array of forms to be utilised by multistep wizard.
 */
function _nesi_mstep_proposal_forms() {
  // Each step relates to a form callback
  return array(     
    'step1' => array( 
      'form id' => 'nesi_mstep_proposal_step_1'
    ),
    'step2' => array(
      'form id' => 'nesi_mstep_proposal_step_2'
    ),
  );
}

function _nesi_mstep_proposal_forms_research_proposal() {
  // These steps are used for Research Proposal workflow

  // Each step relates to a form callback
  return array(     
    'step1' => array( 
      'form id' => 'nesi_mstep_proposal_step_1'
    ),
    'step2' => array(
      'form id' => 'nesi_mstep_proposal_step_2'
    ),
    'step3' => array(
      'form id' => 'nesi_mstep_proposal_step_3'
    ), 
    'step4' => array(
      'form id' => 'nesi_mstep_proposal_step_4'
    ), 
  );
}

/**
 * Returns array of proposal types available for completion.
 */
function nesi_mstep_proposal_class_types() {
  return array(
    'proposal_development_class' => 'Proposal Development',
    'research_proposal_class' => 'Research',
  );
}

/**
 * Returns available cluster platform options for use within proposal forms.
 */
function nesi_mstep_proposal_platform_options() {
  return array(
    'power6' => 'P575/POWER6',
    'power7' => 'P755/POWER7',
    'intel' => 'Intel cluster',
    'bluegene' => 'BlueGeneP',
    'unknown' => 'Don\'t know',
  );
}

function nesi_mstep_proposal_complete($proposal_type = NULL) {
  
  $proposal_label = '';
  
  if (!empty($proposal_type)) {
    if ($proposal_type == 'pdc') {
      $proposal_label = 'Proposal Development ';
    }
    if ($proposal_type == 'prc') {
      $proposal_label = 'Research Proposal ';
    }
  }

  return array(
    '#markup' => '<div class="nesi-confirmation-left"></div>
                  <div class="nesi-confirmation-center">
                    <div class="nesi-confirmation-center-top"></div>
                    <div class="nesi-confirmation-center-inner">
                      <h1>Thank you</h1>
                      <h2>Your '.$proposal_label.'submission has been placed and will now go into the review stage.</h2>
                      <p>A copy of the Access Policy will be in your email inbox.<br />You will receive a confirmation email shortly.</p>
                    </div>
                    <div class="nesi-confirmation-center-bottom"></div>
                  </div>
                  <div class="nesi-confirmation-right"></div>
                  <div class="confirmation-block confirmation-block-1">
                    <h2>What happens next</h2>
                    <p>One of the NeSI staff will be in contact with you shortly to guide you through the process. Alternatively you can contact us here.</p>
                    <p><a href="#contact">Contact us</a>.</p>
                  </div>
                  <div class="confirmation-block confirmation-block-2">
                    <h2>Take a look at who uses NeSI</h2>
                    <p>NeSI is used by researchers nationwide. Take a look at who uses NeSI and some of the current computing allocations.</p>
                    <p><a href="/projects">Read more</a>.</p>
                  </div>',
  );
}

function nesi_mstep_proposal_step_1($form, &$form_state) {
   
  $form['intro'] = nesi_mstep_proposal_intro_form(); 

  $form['buttons']['next']['#value'] = 'Start';  

  return $form;
}

function nesi_mstep_proposal_step_2($form, &$form_state) {

  $proposal_selection = $form_state['ctools_object']->data['proposal-type'];

  if ($proposal_selection == 'proposal_development_class') {
    drupal_set_title('Development Class: Technical Project Proposal'); 
    $form['pdc'] = nesi_mstep_proposal_development_form();
  }
 
  if ($proposal_selection == 'research_proposal_class') {
    drupal_set_title('Research Class: Technical Project Proposal'); 
    $form['buttons']['next']['#value'] = 'Next: Technical Details';  
    $form['prc'] = nesi_mstep_proposal_research_form($form_state);
  }

  // Add here for post grad form id/steps 
  return $form;
}

function nesi_mstep_proposal_step_3($form, &$form_state) {

  $proposal_selection = $form_state['ctools_object']->data['proposal-type'];

  if ($proposal_selection == 'research_proposal_class') {
    drupal_set_title('Research Class: Technical Project Proposal'); 
    $form['buttons']['next']['#value'] = 'Next: Support Information';  
    $form['prc'] = nesi_mstep_proposal_research_form_part_2($form_state);
  }
 
  return $form;
}

function nesi_mstep_proposal_step_4($form, &$form_state) {
 
  $proposal_selection = $form_state['ctools_object']->data['proposal-type'];

  if ($proposal_selection == 'research_proposal_class') {
    drupal_set_title('Research Class: Technical Project Proposal'); 
    $form['prc'] = nesi_mstep_proposal_research_form_part_3();
  }
  
  return $form;
}

function nesi_mstep_proposal_step_1_validate($form, &$form_state) {
  // Check for standard errors
  if(form_get_errors()) {
    return;
  }

  // Check that a proposal type has been selected
  $proposal_selection = $form_state['values']['proposal-type'];

  $options = array('proposal_development_class','research_proposal_class');
   
  if (!in_array($proposal_selection, $options)) {
    form_set_error('proposal-type', 'Please select a proposal type.');
  }

  // Check validation on email address
  $submitter_email = trim($form_state['values']['sub_email']);
  if (!valid_email_address($submitter_email)) {
    form_set_error('sub_email', 'Please supply a valid email address to begin proposal submission.');
  }
}

function nesi_mstep_proposal_step_2_validate($form, &$form_state) {

  if ($form_state['ctools_object']->data['proposal-type'] == 'proposal_development_class') {
    // User needs to choose a platform
    $platform = $form_state['values']['pdc-platform'];
    if (empty($platform)) {
      //form_set_error('pdc-platform', 'Please select an HPC platform.');
    }
  }
}

function nesi_mstep_proposal_step_4_validate($form, &$form_state) {

  // Check for standard errors
  if(form_get_errors()) {
    return;
  }
  
  // User needs to indicate if they need support
  $support = $form_state['values']['prc-expert-support'];
  if (empty($support)) {
    form_set_error('prc-expert-support', 'Please indicate if you need expert support from NeSI');
  }
}

function nesi_mstep_proposal_step_1_submit($form, &$form_state) {

  $form_state['ctools_object']->data['proposal-type'] = $form_state['values']['proposal-type'];
  $form_state['ctools_object']->data['sub-email'] = $form_state['values']['sub_email'];

  // Collect extra steps for research proposal
  if ($form_state['ctools_object']->data['proposal-type'] == 'research_proposal_class') {
    $form_state['ctools_object']->form_info['order'] = _nesi_mstep_proposal_steps_research_proposal();
    $form_state['ctools_object']->form_info['forms'] = _nesi_mstep_proposal_forms_research_proposal(); 
  }
}

function nesi_mstep_proposal_step_2_submit($form, &$form_state) {
  $form_state['ctools_object']->data['form_data'] = $form_state['values'];
}

function nesi_mstep_proposal_step_3_submit($form, &$form_state) {
  $form_state['ctools_object']->data['form_data'] = $form_state['values'];
}

function nesi_mstep_proposal_step_4_submit($form, &$form_state) {
  $form_state['ctools_object']->data['form_data'] = $form_state['values'];
}

/**
 * Next callback
 */
function nesi_mstep_proposal_wizard_next(&$form_state) {
  nesi_mstep_proposal_cache_set('nesi_mstep', $form_state['ctools_object']);
}

function nesi_mstep_proposal_wizard_finish(&$form_state) {
  $form_state['complete'] = TRUE;

  // Save Proposal
  $node_id = _nesi_mstep_proposal_save($form_state);
 
  // Send emails 
  $to = $form_state['ctools_object']->data['sub-email'];
  nesi_mstep_proposal_email($to,$node_id);
  $to = variable_get('submission_nesi_admin_email', 'sam+nesiadmin@webscope.co.nz');
  nesi_mstep_admin_email($to , $node_id, $form_state['ctools_object']);

  // Append proposal type flag to url for completion page
  $proposal_redirect = '';
  $proposal_type = $form_state['ctools_object']->data['proposal-type'];
  if ($proposal_type == 'proposal_development_class') {
    $proposal_redirect = '/pdc';
  }  
  if ($proposal_type == 'research_proposal_class') {
    $proposal_redirect = '/prc';
  }  

  // Clear the form data cache from the session

  // Send user to confirmation page
  drupal_goto('proposal/'.$node_id);
}

/**
 * Creates a base proposal node
 * Serialises proposal form values into bp_container field
 */
function _nesi_mstep_proposal_save(&$form_state) {
  global $user;
  $proposal_type = $form_state['ctools_object']->data['proposal-type'];

  $p_title = 'Proposal Title';

  //if ($proposal_type == 'proposal_development_class') {
    $p_title = $form_state['ctools_object']->data['form_data']['node-title'];
 // }
  //if ($proposal_type == 'research_proposal_class') {
    //$p_title = $form_state['ctools_object']->data['form_data']['node-title'];
  //}

  // Prepare data to be saved
  //$proposal_json = json_encode($form_state['ctools_object']->data);
  //$p_node->bp_container[$p_node->language][0]['value'] = $proposal_json;

  dsm('Outside');
  dsm($form_state);
  // Save proposal data
  if ($proposal_type == 'proposal_development_class') {
    
    $p_node = new stdClass(); // Create a new node object
    $p_node->type = 'proposal_development_class';
    node_object_prepare($p_node); // Set some default values
    $p_node->title = $p_title;
    $p_node->language = LANGUAGE_NONE;
    $p_node->uid = $user->uid;

    // Proposal Development Class
    $p_node->field_pdc_start_date[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-start-date'];
    $p_node->field_pdc_description[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-description'];
    $p_node->field_pdc_pi_name[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-pi-name'];
    $p_node->field_pdc_pi_email[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-pi-email'];
    $p_node->field_pdc_pi_phone[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-pi-phone'];
    $p_node->field_pdc_team_access[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-team-access'];
    $p_node->field_pdc_team_experience[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-team-experience'];

    $p_node->field_pdc_proposed_hpc_platform[$p_node->language] = array();
    $platforms = array_filter($form_state['ctools_object']->data['form_data']['field-pdc-platform']);
    foreach ($platforms as $selected) {
      $p_node->field_pdc_proposed_hpc_platform[$p_node->language][] = array('value' => $selected);
    }
 
    $p_node->field_pdc_software_requirements[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-software-requirments'];
    $p_node->field_pdc_storage_requirements[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-storage-requirements'];

    $p_node->field_pdc_expert_support[$p_node->language] = array();
    $support_items = array_filter($form_state['ctools_object']->data['form_data']['field-pdc-expert-support']);
    foreach ($support_items as $selected) {
      $p_node->field_pdc_expert_support[$p_node->language][] = array('value' => $selected);
    }

    $p_node->field_pdc_additional_information[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['field-pdc-additional-information'];
  }

  if ($proposal_type == 'research_proposal_class') {

    dsm($form_state);
    $p_node = new stdClass(); // Create a new node object
    $p_node->type = 'proposal_research_class';
    node_object_prepare($p_node); // Set some default values
    $p_node->title = $p_title;
    $p_node->language = LANGUAGE_NONE;
    $p_node->uid = $user->uid;

    
    // Research Proposal Class
    $p_node->field_prc_start_date[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-start-date'];
    $p_node->field_prc_scientific_goals[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-scientific-goals'];
    $p_node->field_prc_hpc_benefits[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-hpc-benefits'];
    $p_node->field_prc_project_deliverables[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-deliverables'];
    $p_node->field_prc_funding_provider[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-grant-provider'];
    $p_node->field_prc_grant_title[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-grant-title'];
    $p_node->field_prc_grant_start_date[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-grant-start-date'];
    $p_node->field_prc_grant_duration[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-grant-duration'];
    $p_node->field_prc_funding_amount[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-funding-amount'];
    $p_node->field_prc_pi_name[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-pi-name'];
    $p_node->field_prc_pi_email[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-pi-email'];
    $p_node->field_prc_pi_phone[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-pi-phone'];
    $p_node->field_prc_team_access[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-team-access'];
    $p_node->field_prc_hpc_background[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-team-experience'];

    //form_data
    $p_node->field_prc_estimated_simulations[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-num-simulations'];
    $p_node->field_prc_estimated_cpus[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-num-cpus'];
    $p_node->field_prc_estimated_run_length[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-run-length'];
    $p_node->field_prc_estimated_wc_hours[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-wchours-per-run'];
    $p_node->field_prc_allocation_profile[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-usage-additional'];
    $p_node->field_prc_cpu_hours_intel[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-cpu-hours-intel'];
    $p_node->field_prc_cpu_hours_power6[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-cpu-hours-power6'];
    $p_node->field_prc_cpu_hours_power7[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-cpu-hours-power7'];
    $p_node->field_prc_cpu_hours_bluegene[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-cpu-hours-bluegene'];
    $p_node->field_prc_storage_requirements[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-storage-requirements'];
    $p_node->field_prc_software_requirements[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-software'];
    $p_node->field_prc_data_transfer[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-data-transfer'];

    // Expert Support
    $p_node->field_prc_expert_support[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-expert-support'];
    $p_node->field_prc_expert_support_notes[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-expert-support-notes'];
    $p_node->field_prc_additional_information[$p_node->language][0]['value'] = $form_state['ctools_object']->data['form_data']['prc-expert-further-information'];

  }

  node_save($p_node); 
  $node_id = $p_node->nid;

  return $node_id;
}

function _nesi_mstep_proposal_prc_map() {

  $prc_map['p1'] = array(
    'prc-title' => 'Proposal Title', 
    'prc-start-date' => 'Estimated project start date', 
    'prc-scientific-goals' => 'Scientific Goals',
    'prc-hpc-benefits' => 'Benefits from HPC',
    'prc-deliverables' => 'Project deliverables',
    'prc-grant-provider' => 'Name of peer-reviewed research grant provider',
    'prc-grant-title' => 'Title of research grant',
    'prc-grant-start-date' => 'Start date of the grant',
    'prc-grant-duration' => 'Duration of the grant',
    'prc-funding-amount' => 'The amount of funding approved for HPC',
    'prc-pi-name' => 'Principal\'s name',
    'prc-pi-email' => 'Principal\'s email',
    'prc-pi-phone' => 'Principal\'s phone number',
    'prc-team-access' => 'Project team members requiring access to the NeSI systems',
    'prc-team-experience' => 'Project team\'s HPC experience',
  );

  $prc_map['p2'] = array(
    'prc-num-simulations' => 'Estimated number of runs/simulations.', 
    'prc-num-cpus' => 'Estimated average number of CPUs per run.', 
    'prc-wchours-per-run' => 'Estimated average length of each run (in wall-clock hours).', 
    'prc-usage-additional' => 'Please provide any additional information on usage requirements.', 
    'prc-cpu-hours-intel' => 'CPU core hours required using the Intel cluster', 
    'prc-cpu-hours-power6' => 'CPU core hours required using P575/POWER6', 
    'prc-cpu-hours-power7' => 'CPU core hours required using P755/POWER7', 
    'prc-cpu-hours-bluegene' => 'CPU core hours required using BlueGene/P',
    'prc-storage-requirements' => 'Storage requirements',
    'prc-software' => 'Software requirements',
    'prc-data-transfer' => 'Data transfer',
  );

  $prc_map['p3'] = array(
    'prc-expert-support' => 'Expert support',
    'prc-expert-support-notes' => 'Explanatory notes for "Expert support" section',
    'prc-further-information' => 'Further information',
  );
  
  return $prc_map;
}

function _nesi_mstep_proposal_pdc_map() {
  $pdc_map['p1'] = array(
    'pdc-title' => 'Proposal Title', 
    'pdc-start-date' => 'Estimated project start date', 
    'pdc-description' => 'Project Description',
    'pdc-pi-name' => 'Principal\'s name',
    'pdc-pi-email' => 'Principal\'s email',
    'pdc-pi-phone' => 'Principal\'s phone',
    'pdc-team-access' => 'Project team members requiring access to the NeSI systems',
    'pdc-team-experience' => 'Project team\'s HPC experience',
    'pdc-platform' => 'Desired HPC Platform',
    'pdc-software' => 'Software requirements',
    'pdc-storage' => 'Storage requirements',
    'pdc-expert-support' => 'Expert support',
    'pdc-further-information' => 'Further Information',
  );
  
  return $pdc_map;
}

function nesi_mstep_proposal_wizard_cancel(&$form_state) {
  nesi_mstep_proposal_cache_clear('nesi_mstep');
  $form_state['cancel'] = TRUE;
  drupal_goto('apply/nojs/create-proposal');
}

/**
 * Cache helpers
 */
function nesi_mstep_proposal_cache_set($name, $data) {
  ctools_include('object-cache');
  $cache = ctools_object_cache_set('nesi_mstep_proposal', $name, $data);
}

/**
 * Get the current object from the cache, or default.
 */
function nesi_mstep_proposal_cache_get($name) {
  ctools_include('object-cache');

  $cache = ctools_object_cache_get('nesi_mstep_proposal', $name);
  if (!$cache) {
    $cache = new stdClass();
    $cache->locked = ctools_object_cache_test('nesi_mstep_proposal', $name);
  }
  return $cache;
}

/**
 * Clear the wizard cache.
 */
function nesi_mstep_proposal_cache_clear($name) {
  ctools_include('object-cache');
  ctools_object_cache_clear('nesi_mstep_proposal', $name);
}

function nesi_mstep_proposal_form_alter(&$form, &$form_state, $form_id) {
  // These fields are not currently used in Research Proposal
  // Remove from edit view.
  if ($form_id == 'proposal_research_class_node_form' ) {
    $form['field_prc_proposed_hpc_platform']['#access'] = FALSE;
    $form['field_prc_cpu_core_hours']['#access'] = FALSE;
    $form['field_prc_estimated_run_length']['#access'] = FALSE;
  }
}


