<?php
/**
 * @file
 * Code for the NeSI Proposal feature.
 */

include_once 'nesi_proposal.features.inc';

/**
 * Implements hook_menu().
 */
function nesi_proposal_menu() {

  /* This may not be required with recent change request 
  $items['researcher/proposal/add'] = array(
    'title' => 'Add Proposal',
    'page callback' => 'nesi_proposal_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  */ 

  $items['admin/config/nesi/proposal'] = array(
    'title' => 'NeSI Proposal Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nesi_proposal_admin_settings'),
    'access arguments' => array('administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'nesi_proposal.admin.inc'
  );

  return $items;
}

/**
 * Menu callback.
 */
function nesi_proposal_page() {
// Proposal Creation
// Needs to be switched to a themeable template 
  $output = '';

  $output .= '
<article role="main">
  <div class="module centered-module bordered-module">
    <div>
      <article id="create-proposal">
        <h1>Create a proposal</h1>
        <div class="content">
          <div class="module-actions">
            <a class="btn btn-large" href="/node/add/proposal-development-class">Development Proposal</a>
            <a class="btn btn-large" href="/node/add/proposal-research-class">Research Proposal</a>
          </div>
        </div>
      </article>
    </div>
  </div>
  <div>
    <section>
      <h2>Apply for access to HPC facilities</h2>
        <article>
          <h3>Development Proposal</h3>
          <p>Easy to request with fast review cycles, open to receiving proposals on an ongoing on demand basis. PIs may request a single computational resource or a combination of resources. 
          <a href="/allocations#proposal-development">Learn more</a></p>
        </article>
        <article>
          <h3>Research Proposal</h3>
          <p>Research allocations often follow successful completion of Proposal Development allocations. A PI must either successfully complete a Proposal Development allocation or be able to demonstrate prior relevant experience and success in running their codes on HPC facilities prior to receiving a Research allocation. Research allocations can be proposed to any public research funding body and for any of our HPC facilities.
          <a href="/allocations#research">Learn more</a></p>
        </article>
    </section>
  </div>
</article>
  ';  

  return $output;

}

function nesi_proposal_preprocess_node(&$vars) {
  // Attach relevant project data to node
  if (($vars['type'] == 'proposal_research_class') || ($vars['type'] == 'proposal_development_class')) {
    $project_node = node_load($vars['field_p_project_id'][0]['nid']);
    // Add project data to page
    if ($project_node) {
      $vars['content']['nesi_project'] = node_view($project_node);
    }
  }
}

function _nesi_proposal_generate_pi_form($profile_emw, &$form) {
  global $user;
  $account = $user;
   // Prepopulate fields for users
    $form['submitter']['#type'] = 'fieldset';
    $form['submitter']['#title'] = 'Submitter information';
    $form['submitter']['#weight'] = '2';
    $form['submitter']['field_sub_check']['#title'] = 'I am the submitter and the PI';
    $form['submitter']['field_sub_check']['#type'] = 'checkbox';
    $form['submitter']['field_sub_check']['#default_value'] = 1;
    $form['submitter']['field_sub_name']['#title'] = 'Name of submitter';
    $form['submitter']['field_sub_name']['#type'] = 'textfield';
    $form['submitter']['field_sub_name']['#default_value'] = $profile_emw->field_user_firstname->value() .' '.$profile_emw->field_user_lastname->value();
    $form['submitter']['field_sub_email']['#title'] = 'Contact email of submitter';
    $form['submitter']['field_sub_email']['#type'] = 'textfield';
    $form['submitter']['field_sub_email']['#default_value'] = $account->mail;
    $form['submitter']['field_sub_phone']['#title'] = 'Contact phone of submitter';
    $form['submitter']['field_sub_phone']['#type'] = 'textfield';
    $form['submitter']['field_sub_phone']['#default_value'] = $profile_emw->field_user_phone->value();

    $form['pi']['#type'] = 'fieldset';
    $form['pi']['#title'] = 'PI information';
    $form['pi']['#weight'] = '2';
    $form['pi']['field_pi_name']['#title'] = 'Name of PI';
    $form['pi']['field_pi_name']['#type'] = 'textfield';
    $form['pi']['field_pi_name']['#default_value'] = $profile_emw->field_user_firstname->value() .' '.$profile_emw->field_user_lastname->value();
    $form['pi']['field_pi_email']['#title'] = 'Contact email of PI';
    $form['pi']['field_pi_email']['#type'] = 'textfield';
    $form['pi']['field_pi_email']['#default_value'] = $account->mail;
    $form['pi']['field_pi_phone']['#title'] = 'Contact phone of PI';
    $form['pi']['field_pi_phone']['#type'] = 'textfield';
    $form['pi']['field_pi_phone']['#default_value'] = $profile_emw->field_user_phone->value();

    $form['pi']['#states'] = array(
      'visible' => array(
        ':input[name="field_sub_check"]' => array('checked' => FALSE),
      ));
    // Lock fields
    $form['submitter']['field_sub_name']['#attributes']['disabled'] = TRUE;
    $form['submitter']['field_sub_email']['#attributes']['disabled'] = TRUE;
    $form['submitter']['field_sub_phone']['#attributes']['disabled'] = TRUE;

    $form['pi']['field_pi_name']['#states']['visible'] = FALSE;
    $form['pi']['field_pi_email']['#states']['visible'] = FALSE;
    $form['pi']['field_pi_phone']['#states']['visible'] = FALSE;

    $form['pi']['field_pi_email']['#default_value'] = $account->mail;
    $form['pi']['field_pi_email']['#states'] = array(
      'visible' => array(
        ':input[name="field_sub_check"]' => array('checked' => FALSE),
      ));
    $form['pi']['field_pi_name']['#title'] = '';
    $form['pi']['field_pi_name']['#default_value'] = $profile_emw->field_user_firstname->value() .' '.$profile_emw->field_user_lastname->value();
    $form['pi']['field_pi_name']['#states'] = array(
      'visible' => array(
        ':input[name="field_sub_check"]' => array('checked' => FALSE),
      ));
    $form['pi']['field_pi_phone']['#default_value'] = $profile_emw->field_user_phone->value();
    $form['pi']['field_pi_phone']['#states'] = array(
      'visible' => array(
        ':input[name="field_sub_check"]' => array('checked' => FALSE),
      ));
    // Lock fields
    //$form['field_pdc_pi_email'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
    //$form['field_pdc_pi_name'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
    //$form['field_pdc_pi_phone'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;  
}

/**
 * Implements hook_node_insert()
 */
function nesi_proposal_node_insert($node) {

  //dpm ($node);
  // Create a reference project
  if (($node->type == 'proposal_development_class') || ($node->type == 'proposal_research_class')) {
    $project_node = new stdClass(); // Create a new node object
    $project_node->type = 'project';
    node_object_prepare($project_node); // Set some default values
    $project_node->title = 'Project';
    $project_node->language = LANGUAGE_NONE;
    $project_node->uid = $node->uid;
    
    // Call Reference
    $project_node->field_p_call_id[$project_node->language][0]['value'] = 1;
    $project_node->field_p_nesi_id[$project_node->language][0]['value'] = 'UNDEFINED';

    // User declared themselves as PI
    if ($node->field_sub_check == 1) {  
      $project_node->field_p_principal_investigator[$project_node->language][0]['uid'] = $node->uid;

      $project_node->field_p_pi_name[$project_node->language][0]['value'] = $node->field_sub_name;
      $project_node->field_p_pi_email[$project_node->language][0]['value'] = $node->field_sub_email;
      $project_node->field_p_pi_phone[$project_node->language][0]['value'] = $node->field_sub_phone;

    }
    else {
      // User has provided the PI details, we don't know yet exactly if they are a user in Portal so just store data
      $project_node->field_p_pi_name[$project_node->language][0]['value'] = $node->field_pi_name;
      $project_node->field_p_pi_email[$project_node->language][0]['value'] = $node->field_pi_email;
      $project_node->field_p_pi_phone[$project_node->language][0]['value'] = $node->field_pi_phone;
    }
    $project_node->field_p_proposed_schedule[$project_node->language][0]['value'] = $node->proposed_start_date;
    $project_node->field_p_proposal_id[$project_node->language][0]['nid'] = $node->nid;

    // Add submitter to the team by default 
    //$user_check = _nesi_proposal_uid_search($node->uid, $project_node->field_p_teamlist[LANGUAGE_NONE]);
    //if ($user_check === FALSE) {
      $project_node->field_p_teamlist[LANGUAGE_NONE][] = array('uid' => $node->uid);
    //}

    //dpm($project_node); 
    node_save($project_node);
    
    // Update Proposal with linking project back reference
    $node->field_p_project_id[$node->language][0]['nid'] = $project_node->nid;
    field_attach_update('node', $node);
  }
}

/**
 * Implements hook_node_update()
 */
function nesi_proposal_node_update($node) {

  //dpm ($node);
  // Create a reference project
  if (($node->type == 'proposal_development_class') || ($node->type == 'proposal_research_class')) {

    $project_node = node_load($node->field_p_project_id[$node->language][0]['nid']); 
    //dpm($project_node);
    // Call Reference
    $project_node->field_p_call_id[$project_node->language][0]['value'] = 1;
    $project_node->field_p_nesi_id[$project_node->language][0]['value'] = 'UNDEFINED';

    // User declared themselves as PI
    if ($node->field_sub_check == 1) {  
      $project_node->field_p_principal_investigator[$project_node->language][0]['uid'] = $node->uid;

      $project_node->field_p_pi_name[$project_node->language][0]['value'] = $node->field_sub_name;
      $project_node->field_p_pi_email[$project_node->language][0]['value'] = $node->field_sub_email;
      $project_node->field_p_pi_phone[$project_node->language][0]['value'] = $node->field_sub_phone;

    }
    else {
      $project_node->field_p_principal_investigator[$project_node->language][0] = array();
      // User has provided the PI details, we don't know yet exactly if they are a user in Portal so just store data
      $project_node->field_p_pi_name[$project_node->language][0]['value'] = $node->field_pi_name;
      $project_node->field_p_pi_email[$project_node->language][0]['value'] = $node->field_pi_email;
      $project_node->field_p_pi_phone[$project_node->language][0]['value'] = $node->field_pi_phone;
    }
    $project_node->field_p_proposed_schedule[$project_node->language][0]['value'] = $node->proposed_start_date;

    //dpm($project_node); 
    node_save($project_node);    

    // Get project queue
    $queue = DrupalQueue::get('nesi_rest_project_queue');
    // Add this project update to the queue to be sent to GOLD
    $queue->createItem($project_node);  
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function nesi_proposal_form_proposal_development_class_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm('* Implements hook_form_FORM_ID_alter()');
  //dpm($form_state);

  // Default sticky and promote to frontpage to unchecked
  $form['options']['promote']['#default_value'] = 0;
  $form['options']['sticky']['#default_value'] = 0;

  $form['#validate'][] = 'nesi_proposal_validate_proposal_development_class';
  
  global $user;
  $account = $user;

  $profile = profile2_load_by_user($user, 'researcher_profile');

  if (is_object($profile)) {
    $profile_emw = entity_metadata_wrapper('profile2', $profile);   
    _nesi_proposal_generate_pi_form($profile_emw, $form);
  } 

  $form['proposed_start_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'd-m-Y',
    '#title' => t('Estimated start date'),
    '#required' => TRUE,
  );

  // Preload data if available
  if (!empty($form['field_p_project_id'][LANGUAGE_NONE][0]['nid']['#default_value'])) {
    $project_data = node_load($form['field_p_project_id'][LANGUAGE_NONE][0]['nid']['#default_value']);
    //dpm($project_data);
  }

  if (!empty($project_data->field_p_proposed_schedule[LANGUAGE_NONE][0]['value'])) {
    $form['proposed_start_date']['#default_value'] = $project_data->field_p_proposed_schedule[LANGUAGE_NONE][0]['value'];
  }

  if (!empty($project_data->field_p_pi_email[LANGUAGE_NONE][0]['value'])) {
    $form['pi']['field_pi_name']['#default_value'] = $project_data->field_p_pi_name[LANGUAGE_NONE][0]['value'];
  }

  if (!empty($project_data->field_p_pi_name[LANGUAGE_NONE][0]['value'])) {
    $form['pi']['field_pi_email']['#default_value'] = $project_data->field_p_pi_email[LANGUAGE_NONE][0]['value'];
  }

  if (!empty($project_data->field_p_pi_phone[LANGUAGE_NONE][0]['value'])) {
    $form['pi']['field_pi_phone']['#default_value'] = $project_data->field_p_pi_phone[LANGUAGE_NONE][0]['value'];
  }
  
  $state_check = arg(2);
  if (empty($project_data->field_p_principal_investigator[LANGUAGE_NONE][0]['uid'])) {
    if ($state_check == 'edit') {
      $form['submitter']['field_sub_check']['#default_value'] = 0;
    }
    else {
      $form['submitter']['field_sub_check']['#default_value'] = 1;
    }
  }

  //dpm($form);
  // Add a cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#access' => TRUE,
    '#weight' => 15,
    '#submit' => array('nesi_proposal_form_cancel'),
    '#limit_validation_errors' => array(),
  ); 

  // Redirect on save
  $form['actions']['submit']['#submit'][] = 'nesi_proposal_form_submit';

  $form['field_proposal_nesi_id']['#type'] = 'hidden';

  // Remove preview
  unset($form['actions']['preview']);

  // Hide unused fields below (currently none)
  $form['field_p_project_id']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function nesi_proposal_form_proposal_research_class_node_form_alter(&$form, &$form_state, $form_id) {
  
  // Default sticky and promote to frontpage to unchecked
  $form['options']['promote']['#default_value'] = 0;
  $form['options']['sticky']['#default_value'] = 0;

  $form['#validate'][] = 'nesi_proposal_validate_proposal_research_class';

  global $user;
  $account = $user;

  $profile = profile2_load_by_user($user, 'researcher_profile');

  if (is_object($profile)) {
    $profile_emw = entity_metadata_wrapper('profile2', $profile);   

    _nesi_proposal_generate_pi_form($profile_emw, $form);
  }

  $form['proposed_start_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'd-m-Y',
    '#title' => t('Estimated start date'),
    '#required' => TRUE,
  );

  // Preload data if available
  if (!empty($form['field_p_project_id'][LANGUAGE_NONE][0]['nid']['#default_value'])) {
    $project_data = node_load($form['field_p_project_id'][LANGUAGE_NONE][0]['nid']['#default_value']);
    //dpm($project_data);
  }

  if (!empty($project_data->field_p_proposed_schedule[LANGUAGE_NONE][0]['value'])) {
    $form['proposed_start_date']['#default_value'] = $project_data->field_p_proposed_schedule[LANGUAGE_NONE][0]['value'];
  }

  if (!empty($project_data->field_p_pi_email[LANGUAGE_NONE][0]['value'])) {
    $form['pi']['field_pi_name']['#default_value'] = $project_data->field_p_pi_name[LANGUAGE_NONE][0]['value'];
  }

  if (!empty($project_data->field_p_pi_name[LANGUAGE_NONE][0]['value'])) {
    $form['pi']['field_pi_email']['#default_value'] = $project_data->field_p_pi_email[LANGUAGE_NONE][0]['value'];
  }

  if (!empty($project_data->field_p_pi_phone[LANGUAGE_NONE][0]['value'])) {
    $form['pi']['field_pi_phone']['#default_value'] = $project_data->field_p_pi_phone[LANGUAGE_NONE][0]['value'];
  }


  $state_check = arg(2);
  // Set the state for PI specified
  if (empty($project_data->field_p_principal_investigator[LANGUAGE_NONE][0]['uid'])) {

    if ($state_check == 'edit') {
      $form['submitter']['field_sub_check']['#default_value'] = 0;
    }
    else {
      $form['submitter']['field_sub_check']['#default_value'] = 1;
    }
  }

  // Set hide/show on Expert Support toggle
  $form['field_prc_expert_support_notes']['#states']['visible'][':input[name="field_prc_expert_support[und]"]'] = array('value' => (string)'yes');

  // Add a cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#access' => TRUE,
    '#weight' => 15,
    '#submit' => array('nesi_proposal_form_cancel'),
    '#limit_validation_errors' => array(),
  ); 

  // Redirect on save
  $form['actions']['submit']['#submit'][] = 'nesi_proposal_form_submit';

  $form['field_proposal_nesi_id']['#type'] = 'hidden';

  // Remove preview
  unset($form['actions']['preview']);

  // Hide unused fields below (currently none)
  $form['field_p_project_id']['#access'] = FALSE;
}

/**
 * Validation of proposal submission prior to Drupal saving proposal development
 */
function nesi_proposal_validate_proposal_development_class(&$form, &$form_state) {

  // First we need to verify form specific validation  
  if(form_get_errors()) {
    return;
  }  

  // We can process further checks here if user has not clicked Cancel button
  if ($form_state['clicked_button']['#value'] <> 'Cancel') {

  }
}

/**
 * Validation of REST submission prior to Drupal saving research proposal
 */
function nesi_proposal_validate_proposal_research_class(&$form, &$form_state) {

  // First we need to verify form specific validation  
  if(form_get_errors()) {
    return;
  }  

  // We can process further checks here if user has not clicked Cancel button
  if ($form_state['clicked_button']['#value'] <> 'Cancel') {

  }
}

function nesi_proposal_form_cancel(&$form, &$form_state) {
  // On cancel, if exists redirect user to their current proposal or dashboard.

  // Default redirect back to the researcher dashboard..
  $redirect = array('user');

  // Check if user has a current proposal mmmkay.. if so, redirect there...
  $view = views_get_view('researcher_my_proposals');
  $view->execute();
  $response = $view->result; 
  
  if (!empty($response)) {
    if (!empty($response[0]->nid)) { 
      $redirect = array('node/'.$response[0]->nid);
    }
  }

  $form_state['redirect'] = $redirect;
}

function nesi_proposal_form_submit(&$form, &$form_state) {
  // We no longer need to redirect the submit... just go to the proposal view by default
  //$form_state['redirect'] = array('researcher-my-proposals');
}

function _get_proposal_team_members($multi_form_field = array()) {

  $member_data = array();
  // Returns emails of team members in a simplified array.
  if ($multi_form_field) {
    foreach ($multi_form_field[LANGUAGE_NONE] as $team_member => $title) {
      // Add to collection
      if (is_array($title)) {
        // verify field is not empty
        if (trim($title['value']) <> '') {
          $member_data[]['userId'] = trim($title['value']);
        }
      }
    }
  }
  //dpm($member_data);
  return $member_data;
}

function nesi_proposal_node_access($node, $op, $account) {
  // Limit access to proposal once submitted..
  global $user;

  if ($op == 'view') {
    if (($node->type == 'proposal_research_class') || ($node->type == 'proposal_development_class')) {
      // Block anonymous
      if ($user->uid < 1) {
        return NODE_ACCESS_DENY;
      }
      // Check for ownership 
      if ($user->uid != $node->uid) {
        // Otherwise check if user has appropriate role 
        if (!in_array('reviewer', array_values($account->roles))) {
          // Otherwise check if user included within Team 
          $team_node = node_load($node->field_p_project_id[LANGUAGE_NONE][0]);
          if ($team_node) {
            $user_check = _nesi_team_selector_uid_search($user->uid, $team_node->field_p_teamlist[LANGUAGE_NONE]);
            if ($user_check === FALSE) {
              return NODE_ACCESS_DENY;
            }
          }
          else {
            return NODE_ACCESS_DENY;
          }
        }
      }
    }
  }

  //dpm($node);
  if ($op == 'update') {

    $flag = flag_get_flag('pdc_check_proposal');

    if ($flag->is_flagged($node->nid)) {

      if (!in_array('reviewer', array_values($account->roles))) {

        return NODE_ACCESS_DENY;

      }
    }

    $flag = flag_get_flag('prc_check_proposal');

    if ($flag->is_flagged($node->nid)) {

      if (!in_array('reviewer', array_values($account->roles))) {

        return NODE_ACCESS_DENY;

      }
    }
  }

  if ($op == 'delete') {

    $flag = flag_get_flag('pdc_check_proposal');

    if ($flag->is_flagged($node->nid)) {
      return NODE_ACCESS_DENY;
    }

    $flag = flag_get_flag('prc_check_proposal');

    if ($flag->is_flagged($node->nid)) {
      return NODE_ACCESS_DENY;
    }

  }
}

function _nesi_proposal_uid_search($user_id, $user_field = array()) {
  $user_exists = FALSE;
  // Returns true if user exists in reference field.
  foreach ($user_field as $team_member) {
    // Check for match
    if ($team_member['uid'] == $user_id) {
      $user_exists = TRUE;
    }
  }
  return $user_exists;
}

