<?php
/**
 * @file
 * Code for the NeSI Proposal feature.
 */

include_once 'nesi_proposal.features.inc';

/**
 * Implements hook_menu().
 */
function nesi_proposal_menu() {
  /* 
  $items['add-proposal'] = array(
    'title' => 'Add Proposal',
    'page callback' => 'nesi_proposal_page',
    'access callback' => TRUE,
  ); */

  $items['admin/config/nesi/proposal'] = array(
    'title' => 'NeSI Proposal Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nesi_proposal_admin_settings'),
    'access arguments' => array('administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'nesi_proposal.admin.inc'
  );

  return $items;
}

/**
 * Menu callback.
 */
function nesi_proposal_page() {

  $output = '';

  $output .= '
    <h1 class="title">Proposal Options</h1>
    <p><em>Select the type of proposal you wish to complete:</em></p>
    <div id="proposal-options">
    <p><a href="node/add/proposal-research-class">Research</a></p>
    <p><a href="node/add/proposal-development-class">Proposal Development</a></p>
    <p><a href="node/add/proposal-teaching">Teaching</a></p>
    <p><a href="node/add/proposal-private-industry">Private Industry</a></p>
    <p><a href="node/add/proposal-collaborative">Collaborative</a></p>
    </div>
  ';  

  return $output;

}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function nesi_proposal_form_proposal_development_class_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm('* Implements hook_form_FORM_ID_alter()');
  //dpm($form_state);

  $form['#validate'][] = 'nesi_proposal_validate_proposal_development_class';
  
  global $user;
  $account = $user;

  $profile = profile2_load_by_user($user, 'researcher_profile');

  if (is_object($profile)) {
    $profile_emw = entity_metadata_wrapper('profile2', $profile);   

    // Prepopulate fields for users
    $form['field_pdc_pi_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $account->mail;
    $form['field_pdc_pi_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_emw->field_user_firstname->value() .' '.$profile_emw->field_user_lastname->value();
    $form['field_pdc_pi_phone'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_emw->field_user_phone->value();
    // Lock fields
    $form['field_pdc_pi_email'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
    $form['field_pdc_pi_name'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
    $form['field_pdc_pi_phone'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
  } 

  // Add a cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#access' => TRUE,
    '#weight' => 15,
    '#submit' => array('nesi_proposal_form_cancel'),
    '#limit_validation_errors' => array(),
  ); 

  // Redirect on save
  $form['actions']['submit']['#submit'][] = 'nesi_proposal_form_submit';

  $form['field_proposal_nesi_id']['#type'] = 'hidden';

  // Remove preview
  unset($form['actions']['preview']);

  // Hide unused fields
  unset($form['field_lead_reviewer']);
  unset($form['field_peer_reviewer']);
  unset($form['field_pdc_status']);
  unset($form['field_pdc_outcome']);
  unset($form['field_pdc_outcome_report']);
  unset($form['field_pdc_status_record']);
  unset($form['field_pdc_team_member_emails']);
  //unset($form['field_pdc_team_members']);
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function nesi_proposal_form_proposal_research_class_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm('* Implements hook_form_FORM_ID_alter()');
  //dpm($form_state);

  $form['#validate'][] = 'nesi_proposal_validate_proposal_research_class';

  global $user;
  $account = $user;

  $profile = profile2_load_by_user($user, 'researcher_profile');

  if (is_object($profile)) {
    $profile_emw = entity_metadata_wrapper('profile2', $profile);   

    // Prepopulate fields for users
    $form['field_prc_pi_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $account->mail;
    $form['field_prc_pi_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_emw->field_user_firstname->value() .' '.$profile_emw->field_user_lastname->value();
    $form['field_prc_pi_phone'][LANGUAGE_NONE][0]['value']['#default_value'] = $profile_emw->field_user_phone->value();
    // Lock fields
    $form['field_prc_pi_email'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
    $form['field_prc_pi_name'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
    $form['field_prc_pi_phone'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = TRUE;
  }

  // Add a cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#access' => TRUE,
    '#weight' => 15,
    '#submit' => array('nesi_proposal_form_cancel'),
    '#limit_validation_errors' => array(),
  ); 

  // Redirect on save
  $form['actions']['submit']['#submit'][] = 'nesi_proposal_form_submit';

  $form['field_proposal_nesi_id']['#type'] = 'hidden';

  // Remove preview
  unset($form['actions']['preview']);

  unset($form['field_lead_reviewer']);
  unset($form['field_peer_reviewer']);
  unset($form['field_prc_status']);
  unset($form['field_prc_outcome']);
  unset($form['field_prc_outcome_report']);
  unset($form['field_prc_team_member_emails']);
  //unset($form['field_prc_team_members']);
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function nesi_proposal_form_proposal_private_industry_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm('* Implements hook_form_FORM_ID_alter()');
  //dpm($form_state);

  //$form['#validate'][] = 'nesi_proposal_validate_proposal_private_industry';
  unset($form['field_lead_reviewer']);
  unset($form['field_peer_reviewer']);
  unset($form['field_prc_status']);
  unset($form['field_prc_outcome']);
  unset($form['field_prc_outcome_report']);
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function nesi_proposal_form_proposal_collaborative_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm('* Implements hook_form_FORM_ID_alter()');
  //dpm($form_state);

  //$form['#validate'][] = 'nesi_proposal_validate_proposal_collaborative';
  unset($form['field_lead_reviewer']);
  unset($form['field_peer_reviewer']);
  unset($form['field_prc_status']);
  unset($form['field_prc_outcome']);
  unset($form['field_prc_outcome_report']);
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function nesi_proposal_form_proposal_teaching_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm('* Implements hook_form_FORM_ID_alter()');
  //dpm($form_state);

  //$form['#validate'][] = 'nesi_proposal_validate_proposal_teaching';
  unset($form['field_lead_reviewer']);
  unset($form['field_peer_reviewer']);
  unset($form['field_prc_status']);
  unset($form['field_prc_outcome']);
  unset($form['field_prc_outcome_report']);
}

/**
 * Validation of REST submission prior to Drupal saving proposal development
 */
function nesi_proposal_validate_proposal_development_class(&$form, &$form_state) {
  //dpm($form_state);  

  // First we need to verify form specific validation  
  if(form_get_errors()) {
    return;
  }  

  if ($form_state['clicked_button']['#value'] <> 'Cancel') {

    global $user;
    $account = $user;

    $project_data = array();
    $project_map = array();

    // Prep proposal data for REST interface
    //Project ID - this will be returned by GOLD
    $identifier = nesi_user_tuakiri_identifier();

    //Project Title
    $project_data['projectTitle'] = $form_state['values']['title'];
    $project_data['principal'] = $identifier;

    // Set PI as member
    $members = array();
    $members[]['userId'] = $identifier;
    //PI Team Members
    $project_data['users'] = $members; 

    $project_map['type'] = 'proposal_development_class'; 
    $project_map['prefix'] = 'pdc'; 
    $project_map['drupal_uid'] = $account->uid; 

    //Project Description
    $project_map['description'] = $form_state['values']['field_pdc_description'][LANGUAGE_NONE][0]['value'];
    //Project Team's HPC Experience
    $project_map['team_hpcexperience'] = $form_state['values']['field_pdc_team_hpcexperience'][LANGUAGE_NONE][0]['value'];
    //Software Requirements
    $project_map['software_requirements'] = $form_state['values']['field_pdc_software_requirements'][LANGUAGE_NONE][0]['value'];
    //Storage Requirements
    $project_map['storage_requirements'] = $form_state['values']['field_pdc_storage_requirements'][LANGUAGE_NONE][0]['value'];
    //Expert Support
    //Further Information
    $project_map['additional_information'] = $form_state['values']['field_pdc_additional_information'][LANGUAGE_NONE][0]['value'];

    // Map project data
    $project_data['projectData'] = base64_encode(serialize($project_map));

    $project_json = json_encode($project_data);
    dpm($project_json);

    // Attempt to send proposal to REST interface
    $rest_result = nesi_rest_insert_project($project_data);

    // Check for error or http response
    if ($rest_result <> FALSE) {
      //dpm('Project was created successfully in GOLD.');
      //dpm($rest_result);
      watchdog('nesi_proposal', 'REST project created - DUID " '.$account->uid.' " ', NULL , WATCHDOG_INFO, $link = NULL);
      $json_result = json_decode($rest_result['json_data']);
      if (!empty($json_result->projectId)) { 
        $form_state['values']['field_proposal_nesi_id'][LANGUAGE_NONE][0]['value'] = $json_result->projectId; 
      }
      else {
        // No projectId returned... major problem
        watchdog('nesi_proposal', 'REST failed to return expected result [projectId missing]', NULL , WATCHDOG_ERROR, $link = NULL);
      }
    }
    else {
      // If http response failure, add to watchdog and notify admin
      watchdog('nesi_proposal', 'REST create project failure - DUID " '.$account->uid.' " ', NULL , WATCHDOG_ERROR, $link = NULL);

      // Need to prepare config so NeSI can manage all end-user response text.
      form_set_error('nesi_proposal','There was a problem saving your proposal information. Try to submit again. if you continue to experience problems, please try again later.');
    }
  }

}

/**
 * Validation of REST submission prior to Drupal saving research proposal
 */
function nesi_proposal_validate_proposal_research_class(&$form, &$form_state) {
  //dpm($form_state);  

  // First we need to verify form specific validation  
  if(form_get_errors()) {
    return;
  }  

  if ($form_state['clicked_button']['#value'] <> 'Cancel') {

    global $user;
    $account = $user;

    $project_data = array();
    $project_map = array();

    // Prep proposal data for REST interface
    //Project ID - this will be returned by GOLD

    $identifier = nesi_user_tuakiri_identifier(); 

    //Project Title
    $project_data['projectTitle'] = $form_state['values']['title'];
    $project_data['principal'] = $identifier;

    // Set PI as member
    $members = array();
    $members[]['userId'] = $identifier;
    //PI Team Members
    $project_data['users'] = $members; 

    $project_map['type'] = 'proposal_research_class'; 
    $project_map['prefix'] = 'prc'; 
    $project_map['drupal_uid'] = $account->uid; 

    //Scientific Goals
    $project_map['scientific_goals'] = $form_state['values']['field_prc_scientific_goals'][LANGUAGE_NONE][0]['value'];
    //Benefits from HPC
    $project_map['hpc_benefits'] = $form_state['values']['field_prc_hpc_benefits'][LANGUAGE_NONE][0]['value'];
    //Project Deliverables
    $project_map['project_deliverables'] = $form_state['values']['field_prc_project_deliverables'][LANGUAGE_NONE][0]['value'];
    //Profile of usage through Allocation
    $project_map['allocation_profile'] = $form_state['values']['field_prc_allocation_profile'][LANGUAGE_NONE][0]['value'];
    //Desired HPC Platform
    $project_map['proposed_hpc_platform'] = $form_state['values']['field_prc_proposed_hpc_platform'][LANGUAGE_NONE][0]['value'];
    //CPU Core Hours
    $project_map['cpu_core_hours'] = $form_state['values']['field_prc_cpu_core_hours'][LANGUAGE_NONE][0]['value'];
    //Storage Requirements
    $project_map['storage_requirements'] = $form_state['values']['field_prc_storage_requirements'][LANGUAGE_NONE][0]['value'];
    //Software Requirements
    $project_map['software_requirements'] = $form_state['values']['field_prc_software_requirements'][LANGUAGE_NONE][0]['value'];
    //Data transfer
    $project_map['data_transfer'] = $form_state['values']['field_prc_data_transfer'][LANGUAGE_NONE][0]['value'];
    //Project Team's HPC Experience
    $project_map['hpc_background'] = $form_state['values']['field_prc_hpc_background'][LANGUAGE_NONE][0]['value'];
    //Expert Support
    $project_map['expert_support'] = $form_state['values']['field_prc_expert_support'][LANGUAGE_NONE][0]['value'];
    //Explanatory notes for "Expert support" section
    $project_map['expert_support_notes'] = $form_state['values']['field_prc_export_support_notes'][LANGUAGE_NONE][0]['value'];
    //Funding Provider
    $project_map['funding_provider'] = $form_state['values']['field_prc_funding_provider'][LANGUAGE_NONE][0]['value'];
    //Funding Amount
    $project_map['funding_amount'] = $form_state['values']['field_prc_funding_amount'][LANGUAGE_NONE][0]['value'];
    //Further Information
    $project_map['additional_information'] = $form_state['values']['field_prc_additional_information'][LANGUAGE_NONE][0]['value'];

    // Map project data
    $project_data['projectData'] = base64_encode(serialize($project_map));

    $project_json = json_encode($project_data);
    dpm($project_json);

    // Attempt to send proposal to REST interface
    $rest_result = nesi_rest_insert_project($project_data);

    // Check for error or http response
    if ($rest_result <> FALSE) {
      //dpm('Project was created successfully in GOLD.');
      //dpm($rest_result);
      watchdog('nesi_proposal', 'REST project created - DUID " '.$account->uid.' " ', NULL , WATCHDOG_INFO, $link = NULL);
      $json_result = json_decode($rest_result['json_data']);
      if (!empty($json_result->projectId)) { 
        $form_state['values']['field_proposal_nesi_id'][LANGUAGE_NONE][0]['value'] = $json_result->projectId; 
      }
      else {
        // No projectId returned... major problem
        watchdog('nesi_proposal', 'REST failed to return expected result [projectId missing]', NULL , WATCHDOG_ERROR, $link = NULL);
      }
    }
    else {
      // If http response failure, add to watchdog and notify admin
      watchdog('nesi_proposal', 'REST create project failure - DUID " '.$account->uid.' " ', NULL , WATCHDOG_ERROR, $link = NULL);

      // Need to prepare config so NeSI can manage all end-user response text.
      form_set_error('nesi_proposal','There was a problem saving your proposal information. Try to submit again. if you continue to experience problems, please try again later.');
    }
  }
}

function nesi_proposal_form_cancel(&$form, &$form_state) {
  // On cancel, if exists redirect user to their current proposal or dashboard.

  // Default redirect back to the researcher dashboard..
  $redirect = array('user');

  // Check if user has a current proposal mmmkay.. if so, redirect there...
  $view = views_get_view('researcher_my_proposals');
  $view->execute();
  $response = $view->result; 
  
  if (!empty($response)) {
    if (!empty($response[0]->nid)) { 
      $redirect = array('node/'.$response[0]->nid);
    }
  }

  $form_state['redirect'] = $redirect;
}

function nesi_proposal_form_submit(&$form, &$form_state) {
  // We no longer need to redirect the submit... just go to the proposal view by default
  //$form_state['redirect'] = array('researcher-my-proposals');
}

function _get_proposal_team_members($multi_form_field = array()) {

  $member_data = array();
  // Returns emails of team members in a simplified array.
  if ($multi_form_field) {
    foreach ($multi_form_field[LANGUAGE_NONE] as $team_member => $title) {
      // Add to collection
      if (is_array($title)) {
        // verify field is not empty
        if (trim($title['value']) <> '') {
          $member_data[]['userId'] = trim($title['value']);
        }
      }
    }
  }
  //dpm($member_data);
  return $member_data;
}

function nesi_proposal_node_access($node, $op, $account) {
// Limit access to proposal once submitted..
  global $user;

  //dpm($node);
  if ($op == 'update') {

    $flag = flag_get_flag('pdc_check_proposal');

    if ($flag->is_flagged($node->nid)) {

      if (!in_array('reviewer', array_values($account->roles))) {

        return NODE_ACCESS_DENY;

      }
    }

    $flag = flag_get_flag('prc_check_proposal');

    if ($flag->is_flagged($node->nid)) {

      if (!in_array('reviewer', array_values($account->roles))) {

        return NODE_ACCESS_DENY;

      }
    }
  }

  if ($op == 'delete') {

    $flag = flag_get_flag('pdc_check_proposal');

    if ($flag->is_flagged($node->nid)) {
      return NODE_ACCESS_DENY;
    }

    $flag = flag_get_flag('prc_check_proposal');

    if ($flag->is_flagged($node->nid)) {
      return NODE_ACCESS_DENY;
    }

  }
}

