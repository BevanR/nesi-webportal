<?php
// $Id$

/**
 * @file
 * Ctools hooks for a multi step form
 */

include_once 'forms/proposal_form_intro.inc';
include_once 'forms/proposal_form_development.inc';
include_once 'forms/proposal_form_research.inc';

/**
 * Implementation of hook_menu()
 */
function nesi_mstep_proposal_menu() {
  $items = array();
  
  $items['apply/%ctools_js/create-proposal'] = array(
    'title' => t('Apply for Access to HPC Facilities'),
    'page callback' => 'nesi_mstep_proposal_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Page callback for apply/%ctools_js/create-proposal
 */
function nesi_mstep_proposal_page($js = NULL, $step = NULL) {
 
  ctools_include('wizard');
  ctools_include('object-cache');

  // Get form from cache
  $ctools_object = nesi_mstep_proposal_cache_get('nesi_mstep');

  if (empty($ctools_object->form_info)) {
 
    $ctools_object->form_info = array(
      'id' => 'nesi_mstep', //form id
      'path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step", //pass the step we're on to the form, step1, step2, ..etc
      'show trail' => FALSE, //show the breadcrumb / path trail for the forms
      'show back' => TRUE, //show the back button
      'show cancel' => FALSE, //show the cancel button
      'show return' => FALSE, //show the update and return button
      'next callback' =>  'nesi_mstep_proposal_wizard_next', //a callback function to run when the next button is pressed
      'finish callback' => 'nesi_mstep_proposal_wizard_finish', //callback when finish button is pressed
      'cancel callback' => 'nesi_mstep_proposal_wizard_cancel', //callback when cancel button is pressed
      'cancel path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step",
      'return path' => "apply/" . ($js ? 'ajax' : 'nojs') . "/create-proposal/%step",
      'finish text' => 'Finish',
      'order' => _nesi_mstep_proposal_steps(),
      'forms' => _nesi_mstep_proposal_forms(), 
    );

  }
  
  $form_state['ctools_object'] = $ctools_object;

  // Send this all off to our form. This is like drupal_get_form only wizardy.
  $ctools_form = ctools_wizard_multistep_form($ctools_object->form_info, $step, $form_state);
  $output = drupal_render($ctools_form);
  
  return $output;
}

/**
 * Returns array of steps (in order of display) for use within the multistep wizard.
 */
function _nesi_mstep_proposal_steps() {
  return array( 
    'step1' => t('Get Started'),
    'step2' => t('Proposal Information'),
    'step3' => t('Completion'),
  );
}

/**
 * Returns array of forms to be utilised by multistep wizard.
 */
function _nesi_mstep_proposal_forms() {
  // Each step relates to a form callback
  return array(     
    'step1' => array( 
      'form id' => 'nesi_mstep_proposal_step_1'
    ),
    'step2' => array(
      'form id' => 'nesi_mstep_proposal_step_2'
    ),
    'step3' => array(
      'form id' => 'nesi_mstep_proposal_step_3'
    ), 
  );
}

/**
 * Returns array of proposal types available for completion.
 */
function nesi_mstep_proposal_class_types() {
  return array(
    'proposal_development_class' => 'Proposal Development',
    'research_proposal_class' => 'Research',
  );
}

/**
 * Returns available cluster platform options for use within proposal forms.
 */
function nesi_mstep_proposal_platform_options() {
  return array(
    'power6' => 'Power 6',
    'power7' => 'Power 7',
    'intel' => 'Intel',
    'bluegene' => 'Bluegene',
    'unspecified' => 'Don\'t know',
  );
}

function nesi_mstep_proposal_step_1($form, &$form_state) {
  $form_state['title'] = t('Apply for Access to HPC Facilities');
  
  $form['intro'] = nesi_mstep_proposal_intro_form(); 
  
  return $form;
}

function nesi_mstep_proposal_step_2($form, &$form_state) {
  
  $options = nesi_mstep_proposal_class_types();
  $choice = $options[$form_state['ctools_object']->data['proposal-type']];

  if ($choice == 'Proposal Development') {
    $form['pdc'] = nesi_mstep_proposal_development_form();
  }
 
  if ($choice == 'Research') {
    $form['prc'] = nesi_mstep_proposal_research_form();
  }
  
  return $form;
}

function nesi_mstep_proposal_step_3($form, &$form_state) {
  
  $name = $form_state['object']['name'];
  $options = nesi_mstep_proposal_class_types();

  $form['proposal-complete'] = array(
    '#markup' => '<div>
                    <h1>Confirmation</h1>
                    <h2>Thank you. Your Development Allocation Proposal has been placed and will now go into the review stage. A copy of the Access Policy will be in your email inbox. You will receive a confirmation email shortly.</h2>
                    <p>&nbsp;</p>
                    <h3>What happens next?</h3>
                    <p>One of the NeSI staff will be in contact with you shortly to guide you through the process. If you have any queries, please use the <a href="#">contact form here</a>.</p>
                  </div>',
  );
  
  return $form;
}

/*
function nesi_mstep_proposal_step_1_validate(&$form, &$form_state) {
  // Check for cancel
  if ($form_state['clicked_button']['#next'] != $form_state['next']) {
    nesi_mstep_proposal_wizard_cancel($form_state);
    drupal_get_messages('error');
    form_set_error(NULL, '', TRUE);
    return;
  }
}
*/

function nesi_mstep_proposal_step_1_submit($form, &$form_state) {
  $form_state['ctools_object']->data['proposal-type'] = $form_state['values']['proposal-type'];
}


function nesi_mstep_proposal_step_2_submit($form, &$form_state) {
  $form_state['ctools_object']->data['proposal-type'] = $form_state['values']['proposal-type'];
}


/**
 * Next callback
 */
function nesi_mstep_proposal_wizard_next(&$form_state) {
  nesi_mstep_proposal_cache_set('nesi_mstep', $form_state['ctools_object']);
}

function nesi_mstep_proposal_wizard_finish(&$form_state) {
  $form_state['complete'] = TRUE;
}

function nesi_mstep_proposal_wizard_cancel(&$form_state) {
  nesi_mstep_proposal_cache_clear('nesi_mstep');
  $form_state['cancel'] = TRUE;
}

/**
 * Cache helpers
 */
function nesi_mstep_proposal_cache_set($name, $data) {
  ctools_include('object-cache');
  $cache = ctools_object_cache_set('nesi_mstep_proposal', $name, $data);
}

/**
 * Get the current object from the cache, or default.
 */
function nesi_mstep_proposal_cache_get($name) {
  ctools_include('object-cache');

  $cache = ctools_object_cache_get('nesi_mstep_proposal', $name);
  if (!$cache) {
    $cache = new stdClass();
    $cache->locked = ctools_object_cache_test('nesi_mstep_proposal', $name);
  }
  return $cache;
}

/**
 * Clear the wizard cache.
 */
function nesi_mstep_proposal_cache_clear($name) {
  ctools_include('object-cache');
  ctools_object_cache_clear('nesi_mstep_proposal', $name);
}

function nesi_mstep_proposal_theme($existing, $type, $theme, $path) {

  $variables = array();

  return array(
    'nesi_mstep_proposal_step' => array(
      'variables' => $variables,
      'template' => 'nesi-mstep-proposal-step',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    ),
    'nesi_mstep_proposal_wrapper' => array(
      'variables' => array('content' => NULL),
      'template' => 'nesi-mstep-proposal-wrapper',
      'path' => drupal_get_path('module', 'nesi_mstep_proposal') .'/templates'
    )
  ); 
}

