<?php
/**
 * @file
 * NeSI REST module.
 * 
 * The purpose of this module is to provide configuration options and functions for connecting
 * to the NeSI Access Workflow REST interface. The config information will be used by other NeSI 
 * Drupal modules such as nesi_user and nesi_proposal.
 *
 * @todo Provide REST interface connection status to admin.
 */

/**
 * Implementation of hook_perm().
 */
function nesi_rest_permission() {
  return array(
    'administer nesi rest' => array(
      'title' => t('Administer NeSI REST'),
      'description' => t('Configure NeSI REST module.')
    )
  );
}

/**
 * Implements hook_menu().
 */
function nesi_rest_menu() {

  $items['admin/config/nesi/rest'] = array(
    'title' => 'NeSI REST Interface Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nesi_rest_admin_settings'),
    'access arguments' => array('administer nesi rest'),
    'file' => 'nesi_rest.admin.inc'
  );

  return $items;
}

/*
 * Provides REST interface connection information for other NeSI modules
 *
 * @return
 *   Returns REST interface base_url and port as a string. e.g. http://awapi:8080/
 */
function nesi_rest_connection_uri() {

  $rest_server = variable_get( 'nesi_rest_base_url', 'http://gold.dev.nesi.org.nz:8080/goldwrap/rest/goldwrap');
  //$rest_port = variable_get( 'nesi_rest_base_port', '8080' );
  //$connection_string = 'http://'.$rest_server.':'.$rest_port.'/';

  $connection_string = $rest_server.'/';

  return $connection_string;
}

/*
 * Identifies whether the REST interface is currently enabled or disabled within Drupal.
 *
 * @return
 *   Returns TRUE if interface is enabled, FALSE if it is disabled
 */
function nesi_rest_interface_status() {
  
  $status = variable_get( 'nesi_rest_interface_status', '0' );
  if ($status == 1) {
    return TRUE;
  }
  
  return FALSE;
}

/*
 * Takes a goldwrap request and connects to the REST interface.
 * $request_method -  supported options: GET (default) and POST. (DELETE to be implemented) 
 * @return
 *   Success returns array containing http_code as integer and json_data response
 *   Failure returns FALSE (if request fails, api disabled or some other error to do with transport)
 *   FALSE will result in error being sent to watchdog
 */
function nesi_rest_connection_process($request_uri, $request_method = 'GET', $json_data = NULL) {

  // Before we do anything, check if REST is enabled in Drupal's admin interface
  if (nesi_rest_interface_status() == TRUE) {

    // Check data length (current GOLD limitation of 4k)...
    if (strlen($json_data) < 4000) {
      // Initialise
      $ch = curl_init();

      // default headers
      $request_headers = array('Content-Type: application/json', 'Accept: application/json');

      // default request method to GET unless specified otherwise
      curl_setopt($ch, CURLOPT_HTTPGET, TRUE);

      if ($request_method == 'POST') {
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
      }
      
      if ($request_method == 'PUT') {
        curl_setopt($cddh, CURLOPT_HTTPGET, FALSE);
        // Default curl PUT setting failed to work, set the PUT request manually
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
        $request_headers = array('Content-Type: application/json', 'Accept: application/json', 'Content-Length: ' . strlen($json_data));
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
      }

      // set REST URL and other appropriate options
      curl_setopt($ch, CURLOPT_URL, $request_uri);
      curl_setopt($ch, CURLOPT_HTTPHEADER, $request_headers); 
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
      curl_setopt($ch, CURLOPT_TIMEOUT, 20);

      // Execute
      $rest_response = curl_exec($ch);

      // Check if any error occured
      if(curl_errno($ch) > 0) {
        // Set error message in drupal watchdog
        watchdog('nesi_rest', 'REST: Communication error: '.curl_error($ch), NULL , WATCHDOG_ERROR, $link = NULL);
        //drupal_set_message('Curl error: ' . curl_error($ch));

        return FALSE;
      }
      else {
        
        // No error reported, check REST api response
        $result_status = curl_getinfo($ch);
        
        // Prepare response data array
        $response_data = array();      
        $response_data['http_code'] = $result_status['http_code'];
        $response_data['json_data'] = $rest_response;
   
        watchdog('nesi_rest', 'REST: Response HTTPCODE " '.$result_status['http_code'].' " CONTENT " '.$rest_response.' "', NULL , WATCHDOG_INFO, $link = NULL);
        return $response_data;
      }

      // Finished - close handle
      curl_close($ch);  
    }
    else {
      // Artificial restriction on size of dataset
      watchdog('nesi_rest', 'REST: Request size error: JSON exceeds 4k', NULL , WATCHDOG_ERROR, $link = NULL);
    }
  }
  else {
    // REST API is disabled - call currently supressed
    watchdog('nesi_rest', 'REST: Communication disabled.', NULL , WATCHDOG_NOTICE, $link = NULL);
    return FALSE;
  }
}

/* Takes the API response and identifies a successful or failed response based on http_code.
 * Currently does not check the validity of the json response from the REST api.
 * @params response_data array
 * returns TRUE on 200-204 response code otherwise returns FALSE
 */
function nesi_rest_verify_response($response_data = array()) {

  // Before we do anything, check if REST is enabled in Drupal's admin interface
  if (nesi_rest_interface_status() == TRUE) {  
    // Check http_code - currently we only check for success codes
    // Error codes will be logged/handled but hidden from the end user
    if (($response_data['http_code'] >= 200) && ($response_data['http_code'] <= 204)) {
      watchdog('nesi_rest', 'REST: Response success - '.$response_data['http_code'], NULL , WATCHDOG_INFO, $link = NULL);
      return TRUE;  
    }
    else {
      watchdog('nesi_rest', 'REST: Response failure - '.$response_data['http_code'], NULL , WATCHDOG_ERROR, $link = NULL);
      return FALSE;
    }
  }
  /*
  These are taken from the W3 consortium HTTP/1.1: Status Code Definitions, found at
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html

  [Informational 1xx]
  100="Continue"
  101="Switching Protocols"

  [Successful 2xx]
  200="OK"
  201="Created"
  202="Accepted"
  203="Non-Authoritative Information"
  204="No Content"
  205="Reset Content"
  206="Partial Content"

  [Redirection 3xx]
  300="Multiple Choices"
  301="Moved Permanently"
  302="Found"
  303="See Other"
  304="Not Modified"
  305="Use Proxy"
  306="(Unused)"
  307="Temporary Redirect"

  [Client Error 4xx]
  400="Bad Request"
  401="Unauthorized"
  402="Payment Required"
  403="Forbidden"
  404="Not Found"
  405="Method Not Allowed"
  406="Not Acceptable"
  407="Proxy Authentication Required"
  408="Request Timeout"
  409="Conflict"
  410="Gone"
  411="Length Required"
  412="Precondition Failed"
  413="Request Entity Too Large"
  414="Request-URI Too Long"
  415="Unsupported Media Type"
  416="Requested Range Not Satisfiable"
  417="Expectation Failed"

  [Server Error 5xx]
  500="Internal Server Error"
  501="Not Implemented"
  502="Bad Gateway"
  503="Service Unavailable"
  504="Gateway Timeout"
  505="HTTP Version Not Supported"

  */
}

/* Returns json list of users or FALSE on failure
 * REST URI /rest/goldwrap/users
 * http method GET
 */
function nesi_rest_get_users() {

  $rest_api_call = 'users';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'GET');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
 
}

/* Return user information
 * REST URI /rest/goldwrap/users/{userId}
 * http method GET
 *
   json map {
    "affiliation" : "...", 
    "email" : "...",
    "fullName" : "...",
    "organization" : "...", 
    "phone" : "...", 
    "userId" : "..."
   }
 *
 */
function nesi_rest_get_user($user_id) {

  $rest_api_call = 'users/'.$user_id;

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'GET');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Returns json list of projects or FALSE on failure
 * REST URI /rest/goldwrap/projects
 * http method GET
 */
function nesi_rest_get_projects() {

  $rest_api_call = 'projects';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'GET');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  } 
}

/* Takes user object as array, converts to json -> PUT to rest server
 * REST URI /rest/goldwrap/users
 * http method PUT
 *
   json map {
    "affiliation" : "...", 
    "email" : "...",
    "fullName" : "...",
    "organization" : "...", 
    "phone" : "...", 
    "userId" : "..."
   }
 *
 */
function nesi_rest_insert_user($user_data = array()) {

  $json_data = json_encode($user_data);

  $rest_api_call = 'users';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'PUT', $json_data);

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Takes updated user object as array, converts to json and posts to rest server
 * REST URI /rest/goldwrap/users/{userId}
 * http method POST
 *
   json map {
    "affiliation" : "...", 
    "email" : "...",
    "fullName" : "...",
    "organization" : "...", 
    "phone" : "...", 
    "userId" : "..."
   }
 *
 */
function nesi_rest_update_user($user_data = array()) {

  $json_data = json_encode($user_data);

  $rest_api_call = 'users/'.$user_data['userId'];

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'POST', $json_data);

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Takes updated project object as array, converts to json and posts to rest server
 * REST URI /rest/goldwrap/projects
 * http method POST
 *
  json map {
    "clazz" : "...", 
    "machines" : [ "...", ... ], 
    "users" : [ "...", ... ], 
    "description" : "...", 
    "projectId" : "..." 
  }
 *
 * Note: project users can not be updated via rest_update_project
 */
function nesi_rest_update_project($project_data = array()) {

  $json_data = json_encode($project_data);

  $rest_api_call = 'projects';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'POST', $json_data);

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Queries and returns all projects where this user is the principal. 
 * REST URI /rest/goldwrap/users/{username}/principal
 * http method GET

 REMOVED get_principal_projects no longer has related goldwrap function

function nesi_rest_get_principal_projects($user_id) {

  $rest_api_call = 'users/'.$user_id.'/principal';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'GET');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}
*/

/* Queries and returns all projects for this user. 
 * REST URI /rest/goldwrap/users/{username}/projects
 * http method GET
 
 REMOVED get_user_projects no longer has related goldwrap function

function nesi_rest_get_user_projects($user_id) {

  $rest_api_call = 'users/'.$user_id.'/projects';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'GET');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}
*/

/* Creates a project
 * REST URI /rest/goldwrap/projects
 * http method PUT
 *
  json map {
    "clazz" : "...", 
    "machines" : [ "...", ... ], 
    "users" : [ "...", ... ], 
    "description" : "...", 
    "projectId" : "..." 
  }
 *
 */
function nesi_rest_insert_project($project_data = array()) {

  $json_data = json_encode($project_data);

  $rest_api_call = 'projects';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'PUT', $json_data);

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Return project information
 * REST URI /rest/goldwrap/projects/{projectId}
 * http method GET
 *
  json map {
    "clazz" : "...", 
    "machines" : [ "...", ... ], 
    "users" : [ "...", ... ], 
    "description" : "...", 
    "projectId" : "..." 
  }
 *
 */
function nesi_rest_get_project($project_id) {

  $rest_api_call = 'projects/'.$project_id;

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'GET');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Delete a project
 * REST URI /rest/goldwrap/projects/{projectName} 
 * http method DELETE
 */
function nesi_rest_delete_project($project_name) {

  $rest_api_call = 'projects/'.$project_name;

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

}

/* Add a user to a project
 * REST URI /rest/goldwrap/projects/{projectId}/add_user
 * http method POST
 */
function nesi_rest_project_add_user($project_id, $user_id) {

  $json_data = json_encode($user_id);

  $rest_api_call = 'projects/'.$project_id.'/add_user';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'POST', $json_data);

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Add an allocation to a project
 * REST URI /rest/goldwrap/projects/{projectId}/deposit
 * http method POST
 *
  allocation json map { 
  "accountId" : ..., 
  "allocationId" : ..., 
  "amount" : ..., 
  "clazz" : "...", 
  "creditLimit" : ..., 
  "deposited" : ..., 
  "description" : "...", 
  "endDate" : "...", 
  "machines" : [ "...", ... ], 
  "startDate" : "...", 
  "active" : false 
  }
 */
function nesi_rest_project_add_allocation($project_id, $allocation = array()) {

  $rest_api_call = 'projects/'.$project_id.'/deposit';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'POST');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/* Get allocations of a project
 * REST URI /rest/goldwrap/projects/{projectId}/allocations
 * http method GET
 *
 */
function nesi_rest_get_project_allocations($project_id) {

  $rest_api_call = 'projects/'.$project_id.'/allocations';

  // Construct REST api call 
  $connection_uri = nesi_rest_connection_uri().$rest_api_call;

  // Communicate with REST api
  $rest_result = nesi_rest_connection_process($connection_uri, 'GET');

  // Check response for failure
  $response_check = nesi_rest_verify_response($rest_result);

  // Valid response is  
  if ($response_check) {
    return $rest_result;
  }
  else {
    return FALSE;
  }
}

/**
* Implements hook_cron_queue_info().
*/
function nesi_rest_cron_queue_info() {
  $queues = array();
  // Queue definition for feeding new users and updated user data to GOLD
  $queues['nesi_rest_user_queue'] = array(
    'worker callback' => 'nesi_rest_process_user_queue',
    'time' => 60, //seconds to spend working on the queue
  );
  // Queue definition for feeding new projects to GOLD
  $queues['nesi_rest_project_queue'] = array(
    'worker callback' => 'nesi_rest_process_project_queue', 
    'time' => 60, 
  );
  // Queue definition for feeding project team members to GOLD
  $queues['nesi_rest_project_team_queue'] = array(
    'worker callback' => 'nesi_rest_process_project_team_queue', 
    'time' => 60, 
  );
  // Queue definition for feeding allocations to GOLD
  $queues['nesi_rest_allocation_queue'] = array(
    'worker callback' => 'nesi_rest_process_allocation_queue', 
    'time' => 60, 
  );
  return $queues;
}

function nesi_rest_process_user_queue($item) {
  // Let's try send this to GOLD.
  $tmp_user = (object) $item; 
  //Load latest user data regardless
  $account = user_load($tmp_user->uid, TRUE);

  if ($account) {
    // Send to GOLD...
    drupal_set_message('User '.$account->uid.' processed by GOLD queue','status');
    watchdog('nesi_rest', 'REST: User processed by GOLD queue - UID ( '.$account->uid.' ) ', NULL , WATCHDOG_INFO, $link = NULL);
    dpm($account);

    // Default userdata
    $user_data = array(
      'affiliation' => "", 
      'email' => $account->mail,
      'fullName' => "",
      'organization' => "", 
      'phone' => "",
      'userId' => $account->uid,
    );

    // Check for research profile data added by user
    $profile = profile2_load_by_user($account->uid);
    if (is_object($profile)) {

      $profile_emw = entity_metadata_wrapper('profile2', $profile); 
      dpm($profile_emw);

      $fullname = $profile_emw->field_user_firstname->value();
      $fullname .= ' '.$profile_emw->field_user_middlename->value();
      $fullname .= ' '.$profile_emw->field_user_lastname->value();

      $user_data['fullName'] = $fullname;
      $user_data['organization'] = $profile_emw->field_user_institution->value();
      $user_data['phone'] = $profile_emw->field_user_phone->value();
      $user_data['affiliation'] = $profile_emw->field_user_department->value();
    }

    // Process existing user
    if (!empty($account->gold_create[LANGUAGE_NONE][0]['value'])) {
      dpm('User is created - syncing user');
      
      // Send via REST
      // Attempt to connect to REST and create account
      $rest_result = nesi_rest_update_user($user_data);  

      // Check for error or http response
      if ($rest_result <> FALSE) {
        dpm('User was updated successfully in GOLD.');
        //dpm($rest_result);
        watchdog('nesi_rest', 'REST: User updated - UID ( '.$account->uid.' ) ', NULL , WATCHDOG_INFO, $link = NULL);
      }
      else {
        // If http response failure, add to watchdog and notify admin
        watchdog('nesi_rest', 'REST: Update user failure - UID ( '.$account->uid.' ) ', NULL , WATCHDOG_ERROR, $link = NULL);
        dpm('It appears that there may have been a problem updating the user in GOLD.');
      }
    }
    else {
      // User not created
      dpm('User not created - creating user');
      dpm($user_data); 
      // Send via REST
      // Attempt to connect to REST and create account
      $rest_result = nesi_rest_insert_user($user_data); 

      // Check for error or http response
      if ($rest_result) {
        watchdog('nesi_rest', 'REST: User created - UID ( '.$account->uid.' ) ', NULL , WATCHDOG_INFO, $link = NULL);
        
        // If created in GOLD, set flag in drupal
        $account->gold_create[LANGUAGE_NONE][0]['value'] = 1;

        // Set researcher role
        $researcher_role = user_role_load_by_name('researcher');
        if ($researcher_role) {
          $account->roles += array($researcher_role->rid => $researcher_role->name);
        }

        // Save changes to user.
        user_save($account);
      }
      else {
        watchdog('nesi_rest', 'REST: Create user failure - UID ( '.$account->uid.' ) ', NULL , WATCHDOG_ERROR, $link = NULL);
        
        // Log and flag for admin
        dpm('It appears that there may have been a problem creating the user in GOLD.');
      }
    }
  }
  else {
    // Edge case - unable to load account?
    // Potentially deleted (before queue processed)
    // Log and flag for admin
    watchdog('nesi_rest', 'REST: Unable to load user from queue - UID ( '.$tmp_user->uid.' ) ', NULL , WATCHDOG_ERROR, $link = NULL);
  }
}

function nesi_rest_process_project_queue($item) {

  // Let's try send this to GOLD.
  $tmp_node = (object) $item; 
  //Load latest data regardless to ensure up to date processing
  $project = node_load($tmp_node->nid);

  if ($project) {

    // Send to GOLD...
    drupal_set_message('Project '.$project->nid.' processed by GOLD queue','status');
    watchdog('nesi_rest', 'REST: Project processed by GOLD queue - NID ( '.$project->nid.' ) ', NULL , WATCHDOG_INFO, $link = NULL);
    dpm($project);

    // Default data - set projectId (if defined) and description only
    $project_data = array (
      'description' => '', 
      'projectId' => $project->nid, 
    );

    // Process existing project
    if (!empty($project->gold_create[LANGUAGE_NONE][0]['value'])) {
      dpm('Project gold_create enabled - attempting to update project data in GOLD');
      
      // Check whether GOLD has provided Project ID ?? GOLD is not assigning an ID ? 

      // Send via REST
      // Attempt to connect to REST and update project
      $rest_result = nesi_rest_update_project($project_data);  

      // Check for error or http response
      if ($rest_result <> FALSE) {
        watchdog('nesi_rest', 'REST: Project updated - NID ( '.$project->nid.' ) ', NULL , WATCHDOG_INFO, $link = NULL);
      }
      else {
        // If http response failure, add to watchdog and notify admin
        watchdog('nesi_rest', 'REST: Project update failure - NID ( '.$project->nid.' ) ', NULL , WATCHDOG_ERROR, $link = NULL);
        dpm('It appears that there may have been a problem updating the project in GOLD.');
      }
    }
    else {
      // Project not created
      dpm('Project gold_create is not enabled - attempting to create project in GOLD');
      
      // Send via REST
      // Attempt to connect to REST and create project
      $rest_result = nesi_rest_insert_project($project_data); 

      // Check for error or http response
      if ($rest_result) {
        watchdog('nesi_rest', 'REST: Project created - NID ( '.$project->nid.' ) ', NULL , WATCHDOG_INFO, $link = NULL);
        
        // If created in GOLD, set flag in drupal
        $project->gold_create[LANGUAGE_NONE][0]['value'] = 1;

        // Update project with GOLD provided Project ID ?? GOLD doesn't appear to assign an ID anymore...

        // Save changes to project node.
        node_save($project);
      }
      else {
        watchdog('nesi_rest', 'REST: Project creation failure - NID ( '.$project->nid.' ) ', NULL , WATCHDOG_ERROR, $link = NULL);
        
        // Log and flag for admin
        dpm('It appears that there may have been a problem creating the project in GOLD.');
      }
    }

  }
  else {
    // Edge case - unable to load node?
    // Potentially deleted project node (before queue processed)
    // Log and flag for admin
    watchdog('nesi_rest', 'REST: Unable to load project node from queue - NID ( '.$tmp_node->nid.' ) ', NULL , WATCHDOG_ERROR, $link = NULL);
  }
}

function nesi_rest_process_project_team_queue($item) {
  // Expects $item array()
  // user_id
  // project_id

  // Let's try send this to GOLD.
  $team = $item;
  
  // For purposes of validation, we need to load the user and project to ensure they still exist
  $team_member = user_load($item['user_id'],TRUE);
  $project = node_load($item['project_id']);

  if (!empty($team_member) && !empty($project)) {

    // Send to GOLD...
    drupal_set_message('Team Member '.$team['user_id'].' '.$team['project_id'].' processed by GOLD queue','status');
    watchdog('nesi_rest', 'REST: Project Team processed by GOLD queue - UID ( '.$team['user_id'].' ) NID ( '.$team['project_id'].' )  ', NULL , WATCHDOG_INFO, $link = NULL);
    dpm($project);

    // Default data - assign user (currently awaiting format to POST to GOLD) so this may not work
    $team_data = array (
      'userId' => $team['user_id'], 
    );

    // Send via REST
    // Attempt to connect to REST and add user to project
    $rest_result = nesi_rest_project_add_user($team_data); 

    // Check for error or http response
    if ($rest_result) {
      watchdog('nesi_rest', 'REST: Team updated - UID ( '.$team['user_id'].' ) NID ( '.$team['project_id'].' ) ', NULL , WATCHDOG_INFO, $link = NULL);
    }
    else {
      watchdog('nesi_rest', 'REST: Team update failure - UID ( '.$team['user_id'].' ) NID ( '.$team['project_id'].' ) ', NULL , WATCHDOG_ERROR, $link = NULL);  
      // Log and flag for admin
      dpm('It appears that there may have been a problem updating the team in GOLD.');
    }
  }
  else {
    // Edge case - bad data passed?
    // Potentially deleted project node (before queue processed)
    // Log and flag for admin
    watchdog('nesi_rest', 'REST: Unable to load team or project from project_team queue - NID ( '.$tmp_node->nid.' ) ', NULL , WATCHDOG_ERROR, $link = NULL);
  }
}

function nesi_rest_process_allocation_queue($item) {

}

